import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'org.jetbrains.intellij.platform' version '2.7.1'
    id 'java'
    id 'idea'
}

repositories {
    mavenCentral()
    intellijPlatform.defaultRepositories()
}

// Avoid bundling legacy javax.xml.* implementations inside the plugin (causes classloader split)
configurations.configureEach {
    exclude group: 'xml-apis', module: 'xml-apis'
    exclude group: 'xalan', module: 'xalan'
    exclude group: 'xalan', module: 'serializer'
}

configurations.configureEach {
    resolutionStrategy {
        force 'xerces:xercesImpl:2.12.2'
    }
}

def targetJava = (project.findProperty('javaVersion')) as String

java {
    sourceCompatibility = JavaVersion.toVersion(targetJava)
    targetCompatibility = JavaVersion.toVersion(targetJava)
    toolchain {
        languageVersion = JavaLanguageVersion.of(targetJava.toInteger())
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:deprecation"
}

// take the version number defined in 'gradle.properties' and use that in plugin.xml
tasks.register('initConfig', Copy) {
    from('src/main/resources') {
        include '**/plugin.xml'
        filter(ReplaceTokens, tokens: [version: version])
    }
}

def fopVersion = '2.11'

dependencies {
    intellijPlatform {
        intellijIdeaCommunity(ideaVersion)
        plugins('XPathView:243.22562.13')
        instrumentationTools()
    }
    implementation "org.apache.xmlgraphics:fop:${fopVersion}"
    // Provide public JAXP factories to avoid java.xml internal access under IntelliJ plugin classloader
    implementation 'xerces:xercesImpl:2.12.2'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:5.12.0'
}

sourceSets {
    main {
        resources {
            srcDir "$buildDir/generated/resources/main"
        }
    }
}

// Generate a resource that contains the bundled FOP version so the plugin UI can show it without loading FOP classes
tasks.register('generateFopVersionResource') {
    def outFileProvider = layout.buildDirectory.file("generated/resources/main/META-INF/xslfo/bundled-fop-version.txt")
    outputs.file(outFileProvider)
    doLast {
        def outFile = outFileProvider.get().asFile
        outFile.parentFile.mkdirs()
        outFile.text = fopVersion
    }
}

tasks.named('processResources') {
    dependsOn tasks.named('generateFopVersionResource')
}

version = "${version}"
