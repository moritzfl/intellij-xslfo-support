<?xml version="1.0" encoding="iso-8859-1"?>
<xs:schema
        xmlns="http://www.w3.org/2001/XMLSchema"
        targetNamespace = "http://www.w3.org/1999/XSL/Format"
        xmlns:fo="http://www.w3.org/1999/XSL/Format"
        xmlns:fox="http://xmlgraphics.apache.org/fop/extensions"
        xmlns:xs="http://www.w3.org/2001/XMLSchema"
        xmlns:x="adobe:ns:meta/"
        elementFormDefault="qualified">
    <xs:annotation>
        <xs:documentation>
            XML Schema for XSL Formatting Objects (XSL-FO). This schema defines the structure and content model for XSL-FO documents, which are used to describe the formatting of XML data for presentation in various media.

            XSL-FO is a language for formatting XML data for output to screen, paper, or other media. It is part of the XSL family of recommendations and is designed to be used in conjunction with XSLT.

            For more information on XSL-FO, see:
            - W3C XSL-FO Specification: https://www.w3.org/TR/xsl/
            - Apache FOP Documentation: https://xmlgraphics.apache.org/fop/
            - XSL-FO Reference: https://www.data2type.de/xml-xslt-xslfo/xsl-fo/xslfo-referenz
        </xs:documentation>
    </xs:annotation>
    <xs:import namespace="http://xmlgraphics.apache.org/fop/extensions" schemaLocation="fox.xsd"/>
    <xs:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xs:import namespace="adobe:ns:meta/" schemaLocation="xmpmeta.xsd"/>
    <xs:import namespace="http://www.w3.org/1999/02/22-rdf-syntax-ns#" schemaLocation="rdf.xsd"/>
    <xs:import namespace="http://purl.org/dc/elements/1.1/" schemaLocation="dc.xsd"/>
    <xs:element name="basic-inlines" abstract="true">
        <xs:annotation>
            <xs:documentation>
                Abstract element that serves as the base for all inline-level formatting objects. Inline-level formatting objects are used for text formatting and appear within the content of block-level elements.
            </xs:documentation>
        </xs:annotation>
    </xs:element>
    <xs:element name="basic-blocks" abstract="true" substitutionGroup="fo:blocks">
        <xs:annotation>
            <xs:documentation>
                Abstract element that serves as the base for all block-level formatting objects. Block-level formatting objects generate block areas in the formatting process.
            </xs:documentation>
        </xs:annotation>
    </xs:element>
    <xs:element name="out-of-lines" abstract="true" substitutionGroup="fo:blocks">
        <xs:annotation>
            <xs:documentation>
                Abstract element that serves as the base for all out-of-line formatting objects. Out-of-line formatting objects are placed outside the normal flow of content.
            </xs:documentation>
        </xs:annotation>
    </xs:element>
    <xs:element name="wrappers" abstract="true" substitutionGroup="fo:blocks">
        <xs:annotation>
            <xs:documentation>
                Abstract element that serves as the base for all wrapper formatting objects. Wrapper formatting objects enclose other formatting objects while affecting their formatting context.
            </xs:documentation>
        </xs:annotation>
    </xs:element>
    <xs:group name="inlines">
        <xs:annotation>
            <xs:documentation>
                Defines a group of inline-level formatting objects that can be used within text content. This includes basic inline elements, out-of-line elements, and wrapper elements.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:choice minOccurs="0">
                <xs:element ref="fo:basic-inlines"/>
                <xs:element ref="fo:out-of-lines"/>
                <xs:element ref="fo:wrappers"/>
            </xs:choice>
        </xs:sequence>
    </xs:group>
    <xs:element name="blocks" abstract="true">
        <xs:annotation>
            <xs:documentation>
                Abstract element that serves as the base for all block-level formatting objects. Block-level formatting objects generate block areas in the formatting process and establish a formatting context for their content.
            </xs:documentation>
        </xs:annotation>
    </xs:element>
    <xs:group name="mixed-level">
        <xs:annotation>
            <xs:documentation>
                Defines a group that can contain both inline-level and block-level formatting objects. This allows for mixed content models where both types of elements can appear at the same level.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:choice minOccurs="0">
                <xs:element ref="fo:basic-inlines"/>
                <xs:element ref="fo:basic-blocks"/>
                <xs:element ref="fo:out-of-lines"/>
                <xs:element ref="fo:wrappers"/>
            </xs:choice>
        </xs:sequence>
    </xs:group>
    <xs:attributeGroup name="accessibility-properties">
        <xs:annotation>
            <xs:documentation>
                Defines attributes related to accessibility features. These attributes provide additional information for assistive technologies to improve document accessibility.
            </xs:documentation>
        </xs:annotation>
        <xs:attribute name="source-document">
            <xs:annotation>
                <xs:documentation>
                    Identifies the source document containing the content being formatted.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="role">
            <xs:annotation>
                <xs:documentation>
                    Specifies the role of the element in the document structure, which can be used by assistive technologies.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute ref="fox:alt-text"/>
        <xs:attribute ref="fox:header"/>
    </xs:attributeGroup>
    <xs:attributeGroup name="relative-position-properties">
        <xs:annotation>
            <xs:documentation>
                Defines attributes related to the relative positioning of elements. These attributes control how elements are positioned relative to their normal position in the document flow.
            </xs:documentation>
        </xs:annotation>
        <xs:attribute name="relative-position">
            <xs:annotation>
                <xs:documentation>
                    Specifies the type of positioning used for an element. Values include: auto, static, relative, and inherit.
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="auto"/>
                    <xs:enumeration value="static"/>
                    <xs:enumeration value="relative"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="position">
            <xs:annotation>
                <xs:documentation>
                    Specifies the positioning method used for an element. Values include: static, relative, absolute, fixed, and inherit.
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="static"/>
                    <xs:enumeration value="relative"/>
                    <xs:enumeration value="absolute"/>
                    <xs:enumeration value="fixed"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="top">
            <xs:annotation>
                <xs:documentation>
                    Specifies the top offset for positioned elements. Valid values include a length with units (px, pt, mm, cm, in, em, %), "auto", or "inherit".
                    Examples: "10pt", "2cm", "5%", "auto", "inherit".
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:union>
                    <xs:simpleType>
                        <xs:restriction base="fo:length_Type"/>
                    </xs:simpleType>
                    <xs:simpleType>
                        <xs:restriction base="xs:token">
                            <xs:enumeration value="auto"/>
                            <xs:enumeration value="inherit"/>
                        </xs:restriction>
                    </xs:simpleType>
                </xs:union>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="right">
            <xs:annotation>
                <xs:documentation>
                    Specifies the right offset for positioned elements. Valid values include a length with units (px, pt, mm, cm, in, em, %), "auto", or "inherit".
                    Examples: "10pt", "2cm", "5%", "auto", "inherit".
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:union>
                    <xs:simpleType>
                        <xs:restriction base="fo:length_Type"/>
                    </xs:simpleType>
                    <xs:simpleType>
                        <xs:restriction base="xs:token">
                            <xs:enumeration value="auto"/>
                            <xs:enumeration value="inherit"/>
                        </xs:restriction>
                    </xs:simpleType>
                </xs:union>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="bottom">
            <xs:annotation>
                <xs:documentation>
                    Specifies the bottom offset for positioned elements. Valid values include a length with units (px, pt, mm, cm, in, em, %), "auto", or "inherit".
                    Examples: "10pt", "2cm", "5%", "auto", "inherit".
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:union>
                    <xs:simpleType>
                        <xs:restriction base="fo:length_Type"/>
                    </xs:simpleType>
                    <xs:simpleType>
                        <xs:restriction base="xs:token">
                            <xs:enumeration value="auto"/>
                            <xs:enumeration value="inherit"/>
                        </xs:restriction>
                    </xs:simpleType>
                </xs:union>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="left">
            <xs:annotation>
                <xs:documentation>
                    Specifies the left offset for positioned elements. Valid values include a length with units (px, pt, mm, cm, in, em, %), "auto", or "inherit".
                    Examples: "10pt", "2cm", "5%", "auto", "inherit".
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:union>
                    <xs:simpleType>
                        <xs:restriction base="fo:length_Type"/>
                    </xs:simpleType>
                    <xs:simpleType>
                        <xs:restriction base="xs:token">
                            <xs:enumeration value="auto"/>
                            <xs:enumeration value="inherit"/>
                        </xs:restriction>
                    </xs:simpleType>
                </xs:union>
            </xs:simpleType>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:attributeGroup name="absolute-or-relative-position-properties">
        <xs:annotation>
            <xs:documentation>
                Defines attributes related to both absolute and relative positioning of elements. This group combines absolute positioning attributes with the relative positioning attributes.
            </xs:documentation>
        </xs:annotation>
        <xs:attribute name="absolute-position">
            <xs:annotation>
                <xs:documentation>
                    Specifies the type of absolute positioning used for an element. Values include: auto, absolute, fixed, and inherit.
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="auto"/>
                    <xs:enumeration value="absolute"/>
                    <xs:enumeration value="fixed"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attributeGroup ref="fo:relative-position-properties"/>
    </xs:attributeGroup>
    <!-- Type definitions for pattern-based restrictions -->
    <xs:simpleType name="use_font_metrics_Type">
        <xs:annotation>
            <xs:documentation>
                Defines a type that allows only the value "use-font-metrics". This is used for properties that can use font metrics for their value.
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:token">
            <xs:enumeration value="use-font-metrics"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="length_Type">
        <xs:annotation>
            <xs:documentation>
                Defines a type for length values with units. Valid length values include a number (possibly with a decimal point) followed by a unit (px, pt, mm, cm, in, em, or %). Examples: "12pt", "1.5cm", "80%".
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:pattern value="[\+\-]?\d+\.?\d*(px|pt|mm|cm|in|em|%)"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="percentage_Type">
        <xs:annotation>
            <xs:documentation>
                Defines a type for percentage values. Valid percentage values include a number (possibly with a decimal point) followed by a percent sign (%). Examples: "50%", "100%", "33.3%".
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:pattern value="[\+\-]?\d+\.?\d*%"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="inherit_Type">
        <xs:annotation>
            <xs:documentation>
                Defines a type that allows only the value "inherit". This is used for properties that can inherit their value from a parent element.
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:token">
            <xs:enumeration value="inherit"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="leader_pattern_width_Type">
        <xs:annotation>
            <xs:documentation>
                Defines a type for the leader-pattern-width property, which can be specified as "use-font-metrics", a length, a percentage, or "inherit".
            </xs:documentation>
        </xs:annotation>
        <xs:union memberTypes="fo:use_font_metrics_Type fo:length_Type fo:percentage_Type fo:inherit_Type"/>
    </xs:simpleType>

    <xs:simpleType name="length_range_Type">
        <xs:annotation>
            <xs:documentation>
                A compound datatype, with components: minimum, optimum, maximum. Each component is a length. If "minimum" is greater than optimum, it will be treated as if it had been set to "optimum". If "maximum" is less than optimum, it will be treated as if it had been set to "optimum".
            </xs:documentation>
        </xs:annotation>
        <xs:restriction>
            <xs:simpleType>
                <xs:list>
                    <xs:simpleType>
                        <xs:restriction base="fo:length_Type"/>
                    </xs:simpleType>
                </xs:list>
            </xs:simpleType>
            <xs:minLength value="3"/>
            <xs:maxLength value="3"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="leader_length_Type">
        <xs:union memberTypes="fo:length_range_Type fo:inherit_Type"/>
    </xs:simpleType>

    <!-- Color type definitions -->
    <xs:simpleType name="color_hex_Type">
        <xs:annotation>
            <xs:documentation>
                Defines a type for hexadecimal color values. Valid formats include #RGB and #RRGGBB.
                Examples: "#f00", "#ff0000", "#FF0000".
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:pattern value="#([0-9a-fA-F]{3}|[0-9a-fA-F]{6})"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="color_rgb_Type">
        <xs:annotation>
            <xs:documentation>
                Defines a type for RGB color values. Valid formats include rgb(r,g,b) where r, g, and b are either integers (0-255) or percentages.
                Examples: "rgb(255,0,0)", "rgb(100%,0%,0%)".
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:pattern value="rgb\(\s*(\d{1,3}%?\s*,\s*\d{1,3}%?\s*,\s*\d{1,3}%?)\s*\)"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="color_rgba_Type">
        <xs:annotation>
            <xs:documentation>
                Defines a type for RGBA color values. Valid formats include rgba(r,g,b,a) where r, g, and b are either integers (0-255) or percentages, and a is a number between 0 and 1.
                Examples: "rgba(255,0,0,1)", "rgba(100%,0%,0%,0.5)".
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:pattern value="rgba\(\s*(\d{1,3}%?\s*,\s*\d{1,3}%?\s*,\s*\d{1,3}%?\s*,\s*[0-1](\.\d+)?)\s*\)"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="color_named_Type">
        <xs:annotation>
            <xs:documentation>
                Defines a type for named color values. Valid values include standard CSS color names.
                Examples: "red", "blue", "transparent".
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:token">
            <xs:enumeration value="aqua"/>
            <xs:enumeration value="black"/>
            <xs:enumeration value="blue"/>
            <xs:enumeration value="fuchsia"/>
            <xs:enumeration value="gray"/>
            <xs:enumeration value="green"/>
            <xs:enumeration value="lime"/>
            <xs:enumeration value="maroon"/>
            <xs:enumeration value="navy"/>
            <xs:enumeration value="olive"/>
            <xs:enumeration value="purple"/>
            <xs:enumeration value="red"/>
            <xs:enumeration value="silver"/>
            <xs:enumeration value="teal"/>
            <xs:enumeration value="white"/>
            <xs:enumeration value="yellow"/>
            <xs:enumeration value="transparent"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="color_Type">
        <xs:annotation>
            <xs:documentation>
                Defines a type for color values. Valid values include hexadecimal colors, RGB/RGBA colors, named colors, and "inherit".
                Examples: "#ff0000", "rgb(255,0,0)", "red", "inherit".
            </xs:documentation>
        </xs:annotation>
        <xs:union memberTypes="fo:color_hex_Type fo:color_rgb_Type fo:color_rgba_Type fo:color_named_Type fo:inherit_Type"/>
    </xs:simpleType>

    <!-- Angle type definitions -->
    <xs:simpleType name="angle_Type">
        <xs:annotation>
            <xs:documentation>
                Defines a type for angle values. Valid values include a number followed by a unit (deg, grad, rad).
                Examples: "90deg", "100grad", "1.57rad".
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:pattern value="[\+\-]?\d+\.?\d*(deg|grad|rad)"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="angle_or_inherit_Type">
        <xs:union memberTypes="fo:angle_Type fo:inherit_Type"/>
    </xs:simpleType>

    <!-- Frequency type definitions -->
    <xs:simpleType name="frequency_Type">
        <xs:annotation>
            <xs:documentation>
                Defines a type for frequency values. Valid values include a number followed by a unit (Hz, kHz).
                Examples: "100Hz", "2kHz".
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:pattern value="\d+\.?\d*(Hz|kHz)"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="frequency_or_inherit_Type">
        <xs:union memberTypes="fo:frequency_Type fo:inherit_Type"/>
    </xs:simpleType>

    <!-- Time type definitions -->
    <xs:simpleType name="time_Type">
        <xs:annotation>
            <xs:documentation>
                Defines a type for time values. Valid values include a number followed by a unit (ms, s).
                Examples: "100ms", "2s".
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:pattern value="\d+\.?\d*(ms|s)"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="time_or_inherit_Type">
        <xs:union memberTypes="fo:time_Type fo:inherit_Type"/>
    </xs:simpleType>

    <xs:attributeGroup name="aural-properties">
        <xs:annotation>
            <xs:documentation>
                Defines attributes related to aural (speech) rendering of content. These properties control how content is presented by speech synthesizers and audio-based user agents.
            </xs:documentation>
        </xs:annotation>
        <xs:attribute name="azimuth">
            <xs:annotation>
                <xs:documentation>
                    Specifies the horizontal direction from which the sound should appear to come. Valid values include an angle with units (deg, grad, rad) or "inherit".
                    Examples: "90deg", "100grad", "1.57rad", "inherit".
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="fo:angle_or_inherit_Type"/>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="cue">
            <xs:annotation>
                <xs:documentation>
                    Shorthand property for setting cue-before and cue-after properties.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="cue-after">
            <xs:annotation>
                <xs:documentation>
                    Specifies a sound to be played after speaking an element's content.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="cue-before">
            <xs:annotation>
                <xs:documentation>
                    Specifies a sound to be played before speaking an element's content.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="elevation">
            <xs:annotation>
                <xs:documentation>
                    Specifies the vertical direction from which the sound should appear to come. Valid values include an angle with units (deg, grad, rad) or "inherit".
                    Examples: "45deg", "50grad", "0.78rad", "inherit".
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="fo:angle_or_inherit_Type"/>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="pause">
            <xs:annotation>
                <xs:documentation>
                    Shorthand property for setting pause-before and pause-after properties.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="pause-after">
            <xs:annotation>
                <xs:documentation>
                    Specifies a pause to be observed after speaking an element's content. Valid values include a time with units (ms, s) or "inherit".
                    Examples: "500ms", "2s", "inherit".
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="fo:time_or_inherit_Type"/>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="pause-before">
            <xs:annotation>
                <xs:documentation>
                    Specifies a pause to be observed before speaking an element's content. Valid values include a time with units (ms, s) or "inherit".
                    Examples: "500ms", "2s", "inherit".
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="fo:time_or_inherit_Type"/>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="pitch">
            <xs:annotation>
                <xs:documentation>
                    Specifies the average pitch (frequency) of the speaking voice. Valid values include a frequency with units (Hz, kHz) or "inherit".
                    Examples: "200Hz", "1kHz", "inherit".
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="fo:frequency_or_inherit_Type"/>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="pitch-range">
            <xs:annotation>
                <xs:documentation>
                    Specifies the variation in average pitch. A higher value indicates more variation.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="play-during">
            <xs:annotation>
                <xs:documentation>
                    Specifies a sound to be played as a background while an element's content is spoken.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="richness">
            <xs:annotation>
                <xs:documentation>
                    Specifies the richness or brightness of the speaking voice.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="speak">
            <xs:annotation>
                <xs:documentation>
                    Specifies whether content will be rendered aurally and if so, how it should be rendered.
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="normal"/>
                    <xs:enumeration value="none"/>
                    <xs:enumeration value="spell-out"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="speak-header">
            <xs:annotation>
                <xs:documentation>
                    Specifies whether table headers are spoken before every cell, or only before a cell when that cell is associated with a different header than the previous cell.
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="once"/>
                    <xs:enumeration value="always"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="speak-numeral">
            <xs:annotation>
                <xs:documentation>
                    Specifies how numerals are spoken.
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="digits"/>
                    <xs:enumeration value="continuous"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="speak-punctuation">
            <xs:annotation>
                <xs:documentation>
                    Specifies how punctuation is spoken.
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="code"/>
                    <xs:enumeration value="none"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="speech-rate">
            <xs:annotation>
                <xs:documentation>
                    Specifies the speaking rate. This can be specified as a number or as keywords like "fast", "slow", etc.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="stress">
            <xs:annotation>
                <xs:documentation>
                    Specifies the height of "local peaks" in the intonation contour of the speaking voice.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="voice-family">
            <xs:annotation>
                <xs:documentation>
                    Specifies the voice family to be used for speech output, similar to font-family for visual output.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="volume">
            <xs:annotation>
                <xs:documentation>
                    Specifies the volume of the speaking voice.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:attributeGroup name="border-padding-background-properties">
        <xs:annotation>
            <xs:documentation>
                Defines attributes related to borders, padding, and backgrounds of elements. These properties control the appearance of the element's box model, including borders, padding, and background colors or images.
            </xs:documentation>
        </xs:annotation>
        <xs:attribute name="background">
            <xs:annotation>
                <xs:documentation>
                    Shorthand property for setting all background properties at once: background-color, background-image, background-repeat, background-attachment, and background-position.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="background-attachment">
            <xs:annotation>
                <xs:documentation>
                    Specifies whether the background image is fixed relative to the viewport or scrolls with the content.
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="scroll"/>
                    <xs:enumeration value="fixed"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="background-color">
            <xs:annotation>
                <xs:documentation>
                    Specifies the background color of an element. Valid values include hexadecimal colors (#RGB, #RRGGBB), RGB/RGBA colors, named colors, and "inherit".
                    Examples: "#ff0000", "rgb(255,0,0)", "red", "inherit".
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="fo:color_Type"/>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="background-image">
            <xs:annotation>
                <xs:documentation>
                    Specifies an image to use as the background of an element.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="background-position">
            <xs:annotation>
                <xs:documentation>
                    Specifies the initial position of the background image. This is a shorthand for setting both background-position-horizontal and background-position-vertical.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="background-position-vertical">
            <xs:annotation>
                <xs:documentation>
                    Specifies the vertical position of the background image.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="background-position-horizontal">
            <xs:annotation>
                <xs:documentation>
                    Specifies the horizontal position of the background image.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="background-repeat">
            <xs:annotation>
                <xs:documentation>
                    Specifies how the background image is repeated (tiled).
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="repeat"/>
                    <xs:enumeration value="repeat-x"/>
                    <xs:enumeration value="repeat-y"/>
                    <xs:enumeration value="no-repeat"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="border">
            <xs:annotation>
                <xs:documentation>
                    Shorthand property for setting border width, style, and color. Valid values include combinations of width, style, and color values.
                    Examples: "1px solid black", "thin dotted red", "medium double #ff0000".
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="border-after-color">
            <xs:annotation>
                <xs:documentation>
                    Specifies the color of the after border in the block-progression-direction. Valid values include hexadecimal colors (#RGB, #RRGGBB), RGB/RGBA colors, named colors, and "inherit".
                    Examples: "#ff0000", "rgb(255,0,0)", "red", "inherit".
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="fo:color_Type"/>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="border-after-style">
            <xs:annotation>
                <xs:documentation>
                    Specifies the style of the after border in the block-progression-direction. Valid values include various border styles such as "none", "solid", "dotted", etc.
                    Examples: "solid", "dotted", "dashed", "double", "inherit".
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="none"/>
                    <xs:enumeration value="hidden"/>
                    <xs:enumeration value="dotted"/>
                    <xs:enumeration value="dashed"/>
                    <xs:enumeration value="solid"/>
                    <xs:enumeration value="double"/>
                    <xs:enumeration value="groove"/>
                    <xs:enumeration value="ridge"/>
                    <xs:enumeration value="inset"/>
                    <xs:enumeration value="outset"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="border-after-width">
            <xs:annotation>
                <xs:documentation>
                    Specifies the width of the after border in the block-progression-direction. Valid values include a length with units (px, pt, mm, cm, in, em, %), predefined keywords (thin, medium, thick), or "inherit".
                    Examples: "1px", "2pt", "thin", "medium", "thick", "inherit".
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="border-after-width.length">
            <xs:annotation>
                <xs:documentation>
                    Specifies the absolute width component of the after border. Valid values include a length with units (px, pt, mm, cm, in, em, %).
                    Examples: "1px", "2pt", "0.5cm".
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="border-after-width.conditionality">
            <xs:annotation>
                <xs:documentation>
                    Specifies whether the after border width is conditional. When a border is conditional, it may be discarded at a page break.
                    Valid values: "discard" (may be discarded at a break) or "retain" (must be retained at a break).
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="discard"/>
                    <xs:enumeration value="retain"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="border-before-color">
            <xs:annotation>
                <xs:documentation>
                    Specifies the color of the before border in the block-progression-direction. Valid values include hexadecimal colors (#RGB, #RRGGBB), RGB/RGBA colors, named colors, and "inherit".
                    Examples: "#ff0000", "rgb(255,0,0)", "red", "inherit".
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="fo:color_Type"/>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="border-before-style">
            <xs:annotation>
                <xs:documentation>
                    Specifies the style of the before border in the block-progression-direction. Valid values include various border styles such as "none", "solid", "dotted", etc.
                    Examples: "solid", "dotted", "dashed", "double", "inherit".
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="none"/>
                    <xs:enumeration value="hidden"/>
                    <xs:enumeration value="dotted"/>
                    <xs:enumeration value="dashed"/>
                    <xs:enumeration value="solid"/>
                    <xs:enumeration value="double"/>
                    <xs:enumeration value="groove"/>
                    <xs:enumeration value="ridge"/>
                    <xs:enumeration value="inset"/>
                    <xs:enumeration value="outset"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="border-before-width">
            <xs:annotation>
                <xs:documentation>
                    Specifies the width of the before border in the block-progression-direction. Valid values include a length with units (px, pt, mm, cm, in, em, %), predefined keywords (thin, medium, thick), or "inherit".
                    Examples: "1px", "2pt", "thin", "medium", "thick", "inherit".
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="border-before-width.length">
            <xs:annotation>
                <xs:documentation>
                    Specifies the absolute width component of the before border. Valid values include a length with units (px, pt, mm, cm, in, em, %).
                    Examples: "1px", "2pt", "0.5cm".
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="border-before-width.conditionality">
            <xs:annotation>
                <xs:documentation>
                    Specifies whether the before border width is conditional. When a border is conditional, it may be discarded at a page break.
                    Valid values: "discard" (may be discarded at a break) or "retain" (must be retained at a break).
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="discard"/>
                    <xs:enumeration value="retain"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="border-bottom">
            <xs:annotation>
                <xs:documentation>
                    Shorthand property for setting the width, style, and color of the bottom border. Valid values include combinations of width, style, and color values.
                    Examples: "1px solid black", "thin dotted red", "medium double #ff0000".
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="border-bottom-color">
            <xs:annotation>
                <xs:documentation>
                    Specifies the color of the bottom border. Valid values include hexadecimal colors (#RGB, #RRGGBB), RGB/RGBA colors, named colors, and "inherit".
                    Examples: "#ff0000", "rgb(255,0,0)", "red", "inherit".
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="fo:color_Type"/>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="border-bottom-style">
            <xs:annotation>
                <xs:documentation>
                    Specifies the style of the bottom border. Valid values include various border styles such as "none", "solid", "dotted", etc.
                    Examples: "solid", "dotted", "dashed", "double", "inherit".
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="none"/>
                    <xs:enumeration value="hidden"/>
                    <xs:enumeration value="dotted"/>
                    <xs:enumeration value="dashed"/>
                    <xs:enumeration value="solid"/>
                    <xs:enumeration value="double"/>
                    <xs:enumeration value="groove"/>
                    <xs:enumeration value="ridge"/>
                    <xs:enumeration value="inset"/>
                    <xs:enumeration value="outset"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="border-bottom-width">
            <xs:annotation>
                <xs:documentation>
                    Specifies the width of the bottom border. Valid values include a length with units (px, pt, mm, cm, in, em, %), predefined keywords (thin, medium, thick), or "inherit".
                    Examples: "1px", "2pt", "thin", "medium", "thick", "inherit".
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="border-bottom-width.length">
            <xs:annotation>
                <xs:documentation>
                    Specifies the absolute width component of the bottom border. Valid values include a length with units (px, pt, mm, cm, in, em, %).
                    Examples: "1px", "2pt", "0.5cm".
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="border-bottom-width.conditionality">
            <xs:annotation>
                <xs:documentation>
                    Specifies whether the bottom border width is conditional. When a border is conditional, it may be discarded at a page break.
                    Valid values: "discard" (may be discarded at a break) or "retain" (must be retained at a break).
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="discard"/>
                    <xs:enumeration value="retain"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="border-color">
            <xs:annotation>
                <xs:documentation>
                    Specifies the color of all borders. Valid values include hexadecimal colors (#RGB, #RRGGBB), RGB/RGBA colors, named colors, and "inherit".
                    Examples: "#ff0000", "rgb(255,0,0)", "red", "inherit".
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="fo:color_Type"/>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="border-end-color">
            <xs:annotation>
                <xs:documentation>
                    Specifies the color of the end border. Valid values include hexadecimal colors (#RGB, #RRGGBB), RGB/RGBA colors, named colors, and "inherit".
                    Examples: "#ff0000", "rgb(255,0,0)", "red", "inherit".
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="fo:color_Type"/>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="border-end-style">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="none"/>
                    <xs:enumeration value="hidden"/>
                    <xs:enumeration value="dotted"/>
                    <xs:enumeration value="dashed"/>
                    <xs:enumeration value="solid"/>
                    <xs:enumeration value="double"/>
                    <xs:enumeration value="groove"/>
                    <xs:enumeration value="ridge"/>
                    <xs:enumeration value="inset"/>
                    <xs:enumeration value="outset"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="border-end-width"/>
        <xs:attribute name="border-end-width.length"/>
        <xs:attribute name="border-end-width.conditionality">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="discard"/>
                    <xs:enumeration value="retain"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="border-left"/>
        <xs:attribute name="border-left-color">
            <xs:annotation>
                <xs:documentation>
                    Specifies the color of the left border. Valid values include hexadecimal colors (#RGB, #RRGGBB), RGB/RGBA colors, named colors, and "inherit".
                    Examples: "#ff0000", "rgb(255,0,0)", "red", "inherit".
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="fo:color_Type"/>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="border-left-style">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="none"/>
                    <xs:enumeration value="hidden"/>
                    <xs:enumeration value="dotted"/>
                    <xs:enumeration value="dashed"/>
                    <xs:enumeration value="solid"/>
                    <xs:enumeration value="double"/>
                    <xs:enumeration value="groove"/>
                    <xs:enumeration value="ridge"/>
                    <xs:enumeration value="inset"/>
                    <xs:enumeration value="outset"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="border-left-width">
            <xs:annotation>
                <xs:documentation>
                    Specifies the width of the left border. Valid values include a length with units (px, pt, mm, cm, in, em, %), predefined keywords (thin, medium, thick), or "inherit".
                    Examples: "1px", "2pt", "thin", "medium", "thick", "inherit".
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="border-left-width.length">
            <xs:annotation>
                <xs:documentation>
                    Specifies the absolute width component of the left border. Valid values include a length with units (px, pt, mm, cm, in, em, %).
                    Examples: "1px", "2pt", "0.5cm".
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="border-left-width.conditionality">
            <xs:annotation>
                <xs:documentation>
                    Specifies whether the left border width is conditional. When a border is conditional, it may be discarded at a page break.
                    Valid values: "discard" (may be discarded at a break) or "retain" (must be retained at a break).
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="discard"/>
                    <xs:enumeration value="retain"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="border-right">
            <xs:annotation>
                <xs:documentation>
                    Shorthand property for setting the width, style, and color of the right border. Valid values include combinations of width, style, and color values.
                    Examples: "1px solid black", "thin dotted red", "medium double #ff0000".
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="border-right-color">
            <xs:annotation>
                <xs:documentation>
                    Specifies the color of the right border. Valid values include hexadecimal colors (#RGB, #RRGGBB), RGB/RGBA colors, named colors, and "inherit".
                    Examples: "#ff0000", "rgb(255,0,0)", "red", "inherit".
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="fo:color_Type"/>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="border-right-style">
            <xs:annotation>
                <xs:documentation>
                    Specifies the style of the right border. Valid values include various border styles such as "none", "solid", "dotted", etc.
                    Examples: "solid", "dotted", "dashed", "double", "inherit".
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="none"/>
                    <xs:enumeration value="hidden"/>
                    <xs:enumeration value="dotted"/>
                    <xs:enumeration value="dashed"/>
                    <xs:enumeration value="solid"/>
                    <xs:enumeration value="double"/>
                    <xs:enumeration value="groove"/>
                    <xs:enumeration value="ridge"/>
                    <xs:enumeration value="inset"/>
                    <xs:enumeration value="outset"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="border-right-width">
            <xs:annotation>
                <xs:documentation>
                    Specifies the width of the right border. Valid values include a length with units (px, pt, mm, cm, in, em, %), predefined keywords (thin, medium, thick), or "inherit".
                    Examples: "1px", "2pt", "thin", "medium", "thick", "inherit".
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="border-right-width.length">
            <xs:annotation>
                <xs:documentation>
                    Specifies the absolute width component of the right border. Valid values include a length with units (px, pt, mm, cm, in, em, %).
                    Examples: "1px", "2pt", "0.5cm".
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="border-right-width.conditionality">
            <xs:annotation>
                <xs:documentation>
                    Specifies whether the right border width is conditional. When a border is conditional, it may be discarded at a page break.
                    Valid values: "discard" (may be discarded at a break) or "retain" (must be retained at a break).
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="discard"/>
                    <xs:enumeration value="retain"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="border-start-color">
            <xs:annotation>
                <xs:documentation>
                    Specifies the color of the start border. Valid values include hexadecimal colors (#RGB, #RRGGBB), RGB/RGBA colors, named colors, and "inherit".
                    Examples: "#ff0000", "rgb(255,0,0)", "red", "inherit".
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="fo:color_Type"/>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="border-start-style">
            <xs:annotation>
                <xs:documentation>
                    Specifies the style of the start border in the inline-progression-direction. Valid values include various border styles such as "none", "solid", "dotted", etc.
                    Examples: "solid", "dotted", "dashed", "double", "inherit".
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="none"/>
                    <xs:enumeration value="hidden"/>
                    <xs:enumeration value="dotted"/>
                    <xs:enumeration value="dashed"/>
                    <xs:enumeration value="solid"/>
                    <xs:enumeration value="double"/>
                    <xs:enumeration value="groove"/>
                    <xs:enumeration value="ridge"/>
                    <xs:enumeration value="inset"/>
                    <xs:enumeration value="outset"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="border-start-width">
            <xs:annotation>
                <xs:documentation>
                    Specifies the width of the start border in the inline-progression-direction. Valid values include a length with units (px, pt, mm, cm, in, em, %), predefined keywords (thin, medium, thick), or "inherit".
                    Examples: "1px", "2pt", "thin", "medium", "thick", "inherit".
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="border-start-width.length">
            <xs:annotation>
                <xs:documentation>
                    Specifies the absolute width component of the start border. Valid values include a length with units (px, pt, mm, cm, in, em, %).
                    Examples: "1px", "2pt", "0.5cm".
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="border-start-width.conditionality">
            <xs:annotation>
                <xs:documentation>
                    Specifies whether the start border width is conditional. When a border is conditional, it may be discarded at a page break.
                    Valid values: "discard" (may be discarded at a break) or "retain" (must be retained at a break).
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="discard"/>
                    <xs:enumeration value="retain"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="border-style">
            <xs:annotation>
                <xs:documentation>
                    Shorthand property for setting the style of all four borders. Valid values include various border styles such as "none", "solid", "dotted", etc.
                    Examples: "solid", "dotted", "dashed", "double", "inherit".
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="border-top">
            <xs:annotation>
                <xs:documentation>
                    Shorthand property for setting the width, style, and color of the top border. Valid values include combinations of width, style, and color values.
                    Examples: "1px solid black", "thin dotted red", "medium double #ff0000".
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="border-top-color">
            <xs:annotation>
                <xs:documentation>
                    Specifies the color of the top border. Valid values include hexadecimal colors (#RGB, #RRGGBB), RGB/RGBA colors, named colors, and "inherit".
                    Examples: "#ff0000", "rgb(255,0,0)", "red", "inherit".
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="fo:color_Type"/>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="border-top-style">
            <xs:annotation>
                <xs:documentation>
                    Specifies the style of the top border. Valid values include various border styles such as "none", "solid", "dotted", etc.
                    Examples: "solid", "dotted", "dashed", "double", "inherit".
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="none"/>
                    <xs:enumeration value="hidden"/>
                    <xs:enumeration value="dotted"/>
                    <xs:enumeration value="dashed"/>
                    <xs:enumeration value="solid"/>
                    <xs:enumeration value="double"/>
                    <xs:enumeration value="groove"/>
                    <xs:enumeration value="ridge"/>
                    <xs:enumeration value="inset"/>
                    <xs:enumeration value="outset"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="border-top-width">
            <xs:annotation>
                <xs:documentation>
                    Specifies the width of the top border. Valid values include a length with units (px, pt, mm, cm, in, em, %), predefined keywords (thin, medium, thick), or "inherit".
                    Examples: "1px", "2pt", "thin", "medium", "thick", "inherit".
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="border-top-width.length">
            <xs:annotation>
                <xs:documentation>
                    Specifies the absolute width component of the top border. Valid values include a length with units (px, pt, mm, cm, in, em, %).
                    Examples: "1px", "2pt", "0.5cm".
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="border-top-width.conditionality">
            <xs:annotation>
                <xs:documentation>
                    Specifies whether the top border width is conditional. When a border is conditional, it may be discarded at a page break.
                    Valid values: "discard" (may be discarded at a break) or "retain" (must be retained at a break).
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="discard"/>
                    <xs:enumeration value="retain"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="border-width">
            <xs:annotation>
                <xs:documentation>
                    Shorthand property for setting the width of all four borders. Valid values include a length with units (px, pt, mm, cm, in, em, %), predefined keywords (thin, medium, thick), or "inherit".
                    Examples: "1px", "2pt", "thin", "medium", "thick", "inherit". Can also specify different values for each side: "1px 2px 3px 4px" (top, right, bottom, left).
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="padding">
            <xs:annotation>
                <xs:documentation>
                    Shorthand property for setting padding on all four sides of an element. Valid values include a length with units (px, pt, mm, cm, in, em, %) or "inherit".
                    Examples: "5pt", "1cm", "inherit". Can also specify different values for each side: "1px 2px 3px 4px" (top, right, bottom, left).
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="padding-after">
            <xs:annotation>
                <xs:documentation>
                    Specifies the padding after an element in the block-progression-direction. Valid values include a length with units (px, pt, mm, cm, in, em, %) or "inherit".
                    Examples: "5pt", "1cm", "inherit".
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="padding-after.length">
            <xs:annotation>
                <xs:documentation>
                    Specifies the absolute length component of the padding after an element. Valid values include a length with units (px, pt, mm, cm, in, em, %).
                    Examples: "5pt", "1cm", "0.5in".
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="padding-after.conditionality">
            <xs:annotation>
                <xs:documentation>
                    Specifies whether the padding after an element is conditional. When padding is conditional, it may be discarded at a page break.
                    Valid values: "discard" (may be discarded at a break) or "retain" (must be retained at a break).
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="discard"/>
                    <xs:enumeration value="retain"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="padding-before"/>
        <xs:attribute name="padding-before.length"/>
        <xs:attribute name="padding-before.conditionality">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="discard"/>
                    <xs:enumeration value="retain"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="padding-bottom"/>
        <xs:attribute name="padding-bottom.length"/>
        <xs:attribute name="padding-bottom.conditionality">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="discard"/>
                    <xs:enumeration value="retain"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="padding-end"/>
        <xs:attribute name="padding-end.length"/>
        <xs:attribute name="padding-end.conditionality">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="discard"/>
                    <xs:enumeration value="retain"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="padding-left"/>
        <xs:attribute name="padding-left.length"/>
        <xs:attribute name="padding-left.conditionality">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="discard"/>
                    <xs:enumeration value="retain"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="padding-right"/>
        <xs:attribute name="padding-right.length"/>
        <xs:attribute name="padding-right.conditionality">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="discard"/>
                    <xs:enumeration value="retain"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="padding-start"/>
        <xs:attribute name="padding-start.length"/>
        <xs:attribute name="padding-start.conditionality">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="discard"/>
                    <xs:enumeration value="retain"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="padding-top"/>
        <xs:attribute name="padding-top.length"/>
        <xs:attribute name="padding-top.conditionality">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="discard"/>
                    <xs:enumeration value="retain"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:attributeGroup>

    <xs:attributeGroup name="border-precedence-properties">
        <xs:attribute name="border-after-precedence"/>
        <xs:attribute name="border-before-precedence"/>
        <xs:attribute name="border-end-precedence"/>
        <xs:attribute name="border-start-precedence"/>
    </xs:attributeGroup>
    <xs:attributeGroup name="box-size-properties">
        <xs:attribute name="height"/>
        <xs:attribute name="min-height"/>
        <xs:attribute name="max-height"/>
        <xs:attribute name="width"/>
        <xs:attribute name="min-width"/>
        <xs:attribute name="max-width"/>
        <xs:attribute name="inline-progression-dimension"/>
        <xs:attribute name="inline-progression-dimension.minimum"/>
        <xs:attribute name="inline-progression-dimension.optimum"/>
        <xs:attribute name="inline-progression-dimension.maximum"/>
        <xs:attribute name="block-progression-dimension"/>
        <xs:attribute name="block-progression-dimension.minimum"/>
        <xs:attribute name="block-progression-dimension.optimum"/>
        <xs:attribute name="block-progression-dimension.maximum"/>
    </xs:attributeGroup>
    <xs:attributeGroup name="area-properties">
        <xs:attribute name="clip"/>
        <xs:attribute name="overflow">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="visible"/>
                    <xs:enumeration value="hidden"/>
                    <xs:enumeration value="scroll"/>
                    <xs:enumeration value="auto"/>
                    <xs:enumeration value="error-if-overflow"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="display-align">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="auto"/>
                    <xs:enumeration value="before"/>
                    <xs:enumeration value="center"/>
                    <xs:enumeration value="after"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="reference-orientation">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="0"/>
                    <xs:enumeration value="90"/>
                    <xs:enumeration value="180"/>
                    <xs:enumeration value="270"/>
                    <xs:enumeration value="-90"/>
                    <xs:enumeration value="-180"/>
                    <xs:enumeration value="-270"/>
                    <xs:enumeration value="0deg"/>
                    <xs:enumeration value="90deg"/>
                    <xs:enumeration value="180deg"/>
                    <xs:enumeration value="270deg"/>
                    <xs:enumeration value="-90deg"/>
                    <xs:enumeration value="-180deg"/>
                    <xs:enumeration value="-270deg"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="writing-mode">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="lr-tb"/>
                    <xs:enumeration value="rl-tb"/>
                    <xs:enumeration value="tb-rl"/>
                    <xs:enumeration value="lr"/>
                    <xs:enumeration value="rl"/>
                    <xs:enumeration value="tb"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:attributeGroup name="font-properties">
        <xs:attribute name="font"/>
        <xs:attribute name="font-selection-strategy">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="auto"/>
                    <xs:enumeration value="character-by-character"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="font-family"/>
        <xs:attribute name="font-size"/>
        <xs:attribute name="font-size-adjust"/>
        <xs:attribute name="font-stretch">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="normal"/>
                    <xs:enumeration value="wider"/>
                    <xs:enumeration value="narrower"/>
                    <xs:enumeration value="ultra-condensed"/>
                    <xs:enumeration value="extra-condensed"/>
                    <xs:enumeration value="condensed"/>
                    <xs:enumeration value="semi-condensed"/>
                    <xs:enumeration value="semi-expanded"/>
                    <xs:enumeration value="expanded"/>
                    <xs:enumeration value="extra-expanded"/>
                    <xs:enumeration value="ultra-expanded"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="font-style">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="normal"/>
                    <xs:enumeration value="italic"/>
                    <xs:enumeration value="oblique"/>
                    <xs:enumeration value="backslant"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="font-variant">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="normal"/>
                    <xs:enumeration value="small-caps"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="font-weight">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="normal"/>
                    <xs:enumeration value="bold"/>
                    <xs:enumeration value="bolder"/>
                    <xs:enumeration value="lighter"/>
                    <xs:enumeration value="inherit"/>
                    <xs:enumeration value="100"/>
                    <xs:enumeration value="200"/>
                    <xs:enumeration value="300"/>
                    <xs:enumeration value="400"/>
                    <xs:enumeration value="500"/>
                    <xs:enumeration value="600"/>
                    <xs:enumeration value="700"/>
                    <xs:enumeration value="800"/>
                    <xs:enumeration value="900"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:attributeGroup name="hyphenation-properties-inline">
        <xs:attribute name="country"/>
        <xs:attribute name="language"/>
        <xs:attribute name="script"/>
        <xs:attribute ref="xml:lang"/>
        <xs:attribute name="hyphenate">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="false"/>
                    <xs:enumeration value="true"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="hyphenation-character"/>
        <xs:attribute name="hyphenation-push-character-count"/>
        <xs:attribute name="hyphenation-remain-character-count"/>
    </xs:attributeGroup>
    <xs:attributeGroup name="hyphenation-properties-block">
        <xs:attribute name="hyphenation-keep">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="auto"/>
                    <xs:enumeration value="column"/>
                    <xs:enumeration value="page"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="hyphenation-ladder-count"/>
        <xs:attributeGroup ref="fo:hyphenation-properties-inline"/>
    </xs:attributeGroup>
    <xs:attributeGroup name="margin-properties-CSS">
        <xs:attribute name="margin"/>
        <xs:attribute name="margin-bottom"/>
        <xs:attribute name="margin-left"/>
        <xs:attribute name="margin-right"/>
        <xs:attribute name="margin-top"/>
    </xs:attributeGroup>
    <xs:attributeGroup name="margin-properties-block">
        <xs:attributeGroup ref="fo:margin-properties-CSS"/>
        <xs:attribute name="space-after"/>
        <xs:attribute name="space-after.minimum"/>
        <xs:attribute name="space-after.optimum"/>
        <xs:attribute name="space-after.maximum"/>
        <xs:attribute name="space-after.precedence"/>
        <xs:attribute name="space-after.conditionality">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="retain"/>
                    <xs:enumeration value="discard"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="space-before"/>
        <xs:attribute name="space-before.minimum"/>
        <xs:attribute name="space-before.optimum"/>
        <xs:attribute name="space-before.maximum"/>
        <xs:attribute name="space-before.precedence"/>
        <xs:attribute name="space-before.conditionality">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="retain"/>
                    <xs:enumeration value="discard"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="start-indent"/>
        <xs:attribute name="end-indent"/>
    </xs:attributeGroup>
    <xs:attributeGroup name="margin-properties-inline">
        <xs:attributeGroup ref="fo:margin-properties-block"/>
        <xs:attribute name="space-start"/>
        <xs:attribute name="space-start.minimum"/>
        <xs:attribute name="space-start.optimum"/>
        <xs:attribute name="space-start.maximum"/>
        <xs:attribute name="space-start.precedence"/>
        <xs:attribute name="space-start.conditionality">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="retain"/>
                    <xs:enumeration value="discard"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="space-end"/>
        <xs:attribute name="space-end.minimum"/>
        <xs:attribute name="space-end.optimum"/>
        <xs:attribute name="space-end.maximum"/>
        <xs:attribute name="space-end.precedence"/>
        <xs:attribute name="space-end.conditionality">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="retain"/>
                    <xs:enumeration value="discard"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:attributeGroup name="area-alignment-properties-inline">
        <xs:attribute name="alignment-adjust"/>
        <xs:attribute name="alignment-baseline">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="auto"/>
                    <xs:enumeration value="baseline"/>
                    <xs:enumeration value="before-edge"/>
                    <xs:enumeration value="text-before-edge"/>
                    <xs:enumeration value="middle"/>
                    <xs:enumeration value="central"/>
                    <xs:enumeration value="after-edge"/>
                    <xs:enumeration value="text-after-edge"/>
                    <xs:enumeration value="top"/>
                    <xs:enumeration value="text-top"/>
                    <xs:enumeration value="bottom"/>
                    <xs:enumeration value="text-bottom"/>
                    <xs:enumeration value="ideographic"/>
                    <xs:enumeration value="alphabetic"/>
                    <xs:enumeration value="hanging"/>
                    <xs:enumeration value="mathematical"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="baseline-shift"/>
        <xs:attribute name="dominant-baseline">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="auto"/>
                    <xs:enumeration value="use-script"/>
                    <xs:enumeration value="no-change"/>
                    <xs:enumeration value="reset-size"/>
                    <xs:enumeration value="ideographic"/>
                    <xs:enumeration value="alphabetic"/>
                    <xs:enumeration value="hanging"/>
                    <xs:enumeration value="mathematical"/>
                    <xs:enumeration value="central"/>
                    <xs:enumeration value="middle"/>
                    <xs:enumeration value="text-after-edge"/>
                    <xs:enumeration value="text-before-edge"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="vertical-align"/>
    </xs:attributeGroup>
    <xs:attributeGroup name="line-height-properties">
        <xs:attribute name="line-height"/>
        <xs:attribute name="line-height.minimum"/>
        <xs:attribute name="line-height.optimum"/>
        <xs:attribute name="line-height.maximum"/>
        <xs:attribute name="line-height.precedence"/>
        <xs:attribute name="line-height.conditionality">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="retain"/>
                    <xs:enumeration value="discard"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="line-height-shift-adjustment"/>
    </xs:attributeGroup>
    <xs:attributeGroup name="line-related-properties">
        <xs:attribute name="text-align">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="start"/>
                    <xs:enumeration value="center"/>
                    <xs:enumeration value="end"/>
                    <xs:enumeration value="justify"/>
                    <xs:enumeration value="inside"/>
                    <xs:enumeration value="outside"/>
                    <xs:enumeration value="left"/>
                    <xs:enumeration value="right"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="text-align-last">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="relative"/>
                    <xs:enumeration value="start"/>
                    <xs:enumeration value="center"/>
                    <xs:enumeration value="end"/>
                    <xs:enumeration value="justify"/>
                    <xs:enumeration value="inside"/>
                    <xs:enumeration value="outside"/>
                    <xs:enumeration value="left"/>
                    <xs:enumeration value="right"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="text-indent"/>
        <xs:attribute name="last-line-end-indent"/>
        <xs:attribute name="line-stacking-strategy">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="line-height"/>
                    <xs:enumeration value="font-height"/>
                    <xs:enumeration value="max-height"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="linefeed-treatment">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="ignore"/>
                    <xs:enumeration value="preserve"/>
                    <xs:enumeration value="treat-as-space"/>
                    <xs:enumeration value="treat-as-zero-width-space"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="white-space">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="normal"/>
                    <xs:enumeration value="pre"/>
                    <xs:enumeration value="nowrap"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="white-space-treatment">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="ignore"/>
                    <xs:enumeration value="preserve"/>
                    <xs:enumeration value="ignore-if-before-linefeed"/>
                    <xs:enumeration value="ignore-if-after-linefeed"/>
                    <xs:enumeration value="ignore-if-surrounding-linefeed"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="white-space-collapse">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="false"/>
                    <xs:enumeration value="true"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="wrap-option">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="no-wrap"/>
                    <xs:enumeration value="wrap"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="unicode-bidi">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="normal"/>
                    <xs:enumeration value="embed"/>
                    <xs:enumeration value="bidi-override"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="direction">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="ltr"/>
                    <xs:enumeration value="rtl"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:attributeGroup name="character-properties">
        <xs:attribute name="letter-spacing"/>
        <xs:attribute name="letter-spacing.minimum"/>
        <xs:attribute name="letter-spacing.optimum"/>
        <xs:attribute name="letter-spacing.maximum"/>
        <xs:attribute name="letter-spacing.precedence"/>
        <xs:attribute name="letter-spacing.conditionality">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="retain"/>
                    <xs:enumeration value="discard"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="word-spacing"/>
        <xs:attribute name="word-spacing.minimum"/>
        <xs:attribute name="word-spacing.optimum"/>
        <xs:attribute name="word-spacing.maximum"/>
        <xs:attribute name="word-spacing.precedence"/>
        <xs:attribute name="word-spacing.conditionality">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="retain"/>
                    <xs:enumeration value="discard"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="treat-as-word-space">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="auto"/>
                    <xs:enumeration value="true"/>
                    <xs:enumeration value="false"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="text-decoration" type="xs:NMTOKENS"/>
        <xs:attribute name="score-spaces">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="true"/>
                    <xs:enumeration value="false"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="text-shadow"/>
        <xs:attribute name="text-transform">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="capitalize"/>
                    <xs:enumeration value="uppercase"/>
                    <xs:enumeration value="lowercase"/>
                    <xs:enumeration value="none"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="suppress-at-line-break">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="auto"/>
                    <xs:enumeration value="suppress"/>
                    <xs:enumeration value="retain"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="text-altitude"/>
        <xs:attribute name="text-depth"/>
        <xs:attribute name="glyph-orientation-horizontal">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="0"/>
                    <xs:enumeration value="90"/>
                    <xs:enumeration value="180"/>
                    <xs:enumeration value="270"/>
                    <xs:enumeration value="-90"/>
                    <xs:enumeration value="-180"/>
                    <xs:enumeration value="-270"/>
                    <xs:enumeration value="0deg"/>
                    <xs:enumeration value="90deg"/>
                    <xs:enumeration value="180deg"/>
                    <xs:enumeration value="270deg"/>
                    <xs:enumeration value="-90deg"/>
                    <xs:enumeration value="-180deg"/>
                    <xs:enumeration value="-270deg"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="glyph-orientation-vertical">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="0"/>
                    <xs:enumeration value="90"/>
                    <xs:enumeration value="180"/>
                    <xs:enumeration value="270"/>
                    <xs:enumeration value="-90"/>
                    <xs:enumeration value="-180"/>
                    <xs:enumeration value="-270"/>
                    <xs:enumeration value="0deg"/>
                    <xs:enumeration value="90deg"/>
                    <xs:enumeration value="180deg"/>
                    <xs:enumeration value="270deg"/>
                    <xs:enumeration value="-90deg"/>
                    <xs:enumeration value="-180deg"/>
                    <xs:enumeration value="-270deg"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attributeGroup ref="fo:font-properties"/>
        <xs:attributeGroup ref="fo:line-height-properties"/>
    </xs:attributeGroup>
    <xs:attributeGroup name="keeps-and-breaks-properties-atomic">
        <xs:attribute name="break-after">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="auto"/>
                    <xs:enumeration value="column"/>
                    <xs:enumeration value="page"/>
                    <xs:enumeration value="even-page"/>
                    <xs:enumeration value="odd-page"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="break-before">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="auto"/>
                    <xs:enumeration value="column"/>
                    <xs:enumeration value="page"/>
                    <xs:enumeration value="even-page"/>
                    <xs:enumeration value="odd-page"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="keep-with-next"/>
        <xs:attribute name="keep-with-next.within-line"/>
        <xs:attribute name="keep-with-next.within-column"/>
        <xs:attribute name="keep-with-next.within-page"/>
        <xs:attribute name="keep-with-previous"/>
        <xs:attribute name="keep-with-previous.within-line"/>
        <xs:attribute name="keep-with-previous.within-column"/>
        <xs:attribute name="keep-with-previous.within-page"/>
        <xs:attribute name="page-break-after">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="auto"/>
                    <xs:enumeration value="always"/>
                    <xs:enumeration value="avoid"/>
                    <xs:enumeration value="left"/>
                    <xs:enumeration value="right"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="page-break-before">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="auto"/>
                    <xs:enumeration value="always"/>
                    <xs:enumeration value="avoid"/>
                    <xs:enumeration value="left"/>
                    <xs:enumeration value="right"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:attributeGroup name="keeps-and-breaks-properties-inline">
        <xs:attributeGroup ref="fo:keeps-and-breaks-properties-atomic"/>
        <xs:attribute name="keep-together"/>
        <xs:attribute name="keep-together.within-line"/>
        <xs:attribute name="keep-together.within-column"/>
        <xs:attribute name="keep-together.within-page"/>
        <xs:attribute name="page-break-inside">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="avoid"/>
                    <xs:enumeration value="auto"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:attributeGroup name="keeps-and-breaks-properties-block">
        <xs:attributeGroup ref="fo:keeps-and-breaks-properties-inline"/>
        <xs:attribute name="orphans"/>
        <xs:attribute name="widows"/>
    </xs:attributeGroup>
    <xs:attributeGroup name="leader-properties">
        <xs:attribute name="leader-alignment">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="none"/>
                    <xs:enumeration value="reference-area"/>
                    <xs:enumeration value="page"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="leader-pattern">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="space"/>
                    <xs:enumeration value="rule"/>
                    <xs:enumeration value="dots"/>
                    <xs:enumeration value="use-content"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="leader-pattern-width" type="fo:leader_pattern_width_Type"/>
        <xs:attribute name="leader-length" type="fo:leader_length_Type"/>
        <xs:attribute name="leader-length.minimum" type="fo:length_Type"/>
        <xs:attribute name="leader-length.optimum" type="fo:length_Type"/>
        <xs:attribute name="leader-length.maximum" type="fo:length_Type"/>
        <xs:attribute name="rule-style">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="none"/>
                    <xs:enumeration value="dotted"/>
                    <xs:enumeration value="dashed"/>
                    <xs:enumeration value="solid"/>
                    <xs:enumeration value="double"/>
                    <xs:enumeration value="groove"/>
                    <xs:enumeration value="ridge"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="rule-thickness" type="fo:length_Type"/>
    </xs:attributeGroup>
    <xs:attributeGroup name="table-properties">
        <xs:attribute name="border-collapse">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="collapse"/>
                    <xs:enumeration value="collapse-with-precedence"/>
                    <xs:enumeration value="separate"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="border-spacing"/>
        <xs:attribute name="border-separation"/>
        <xs:attribute name="border-separation.inline-progression-direction"/>
        <xs:attribute name="border-separation.block-progression-direction"/>
        <xs:attribute name="caption-side">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="before"/>
                    <xs:enumeration value="after"/>
                    <xs:enumeration value="start"/>
                    <xs:enumeration value="end"/>
                    <xs:enumeration value="top"/>
                    <xs:enumeration value="bottom"/>
                    <xs:enumeration value="left"/>
                    <xs:enumeration value="right"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="empty-cells">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="show"/>
                    <xs:enumeration value="hide"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="table-layout">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="auto"/>
                    <xs:enumeration value="fixed"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="table-omit-header-at-break">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="true"/>
                    <xs:enumeration value="false"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="table-omit-footer-at-break">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="true"/>
                    <xs:enumeration value="false"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:attributeGroup name="list-properties">
        <xs:attribute name="provisional-distance-between-starts"/>
        <xs:attribute name="provisional-label-separation"/>
    </xs:attributeGroup>
    <xs:attributeGroup name="float-properties">
        <xs:attribute name="float">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="before"/>
                    <xs:enumeration value="start"/>
                    <xs:enumeration value="end"/>
                    <xs:enumeration value="left"/>
                    <xs:enumeration value="right"/>
                    <xs:enumeration value="none"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="clear">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="start"/>
                    <xs:enumeration value="end"/>
                    <xs:enumeration value="left"/>
                    <xs:enumeration value="right"/>
                    <xs:enumeration value="both"/>
                    <xs:enumeration value="none"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="intrusion-displace">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="auto"/>
                    <xs:enumeration value="none"/>
                    <xs:enumeration value="line"/>
                    <xs:enumeration value="indent"/>
                    <xs:enumeration value="block"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:attributeGroup name="visibility-properties">
        <xs:attribute name="visibility">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="visible"/>
                    <xs:enumeration value="hidden"/>
                    <xs:enumeration value="collapse"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="z-index"/>
    </xs:attributeGroup>
    <xs:attributeGroup name="inheritable-properties">
        <xs:attribute name="color">
            <xs:annotation>
                <xs:documentation>
                    Specifies the color of text. Valid values include hexadecimal colors (#RGB, #RRGGBB), RGB/RGBA colors, named colors, and "inherit".
                    Examples: "#ff0000", "rgb(255,0,0)", "red", "inherit".
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="fo:color_Type"/>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="relative-align">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="before"/>
                    <xs:enumeration value="baseline"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="span">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="none"/>
                    <xs:enumeration value="all"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attributeGroup ref="fo:accessibility-properties"/>
        <xs:attributeGroup ref="fo:absolute-or-relative-position-properties"/>
        <xs:attributeGroup ref="fo:border-padding-background-properties"/>
        <xs:attributeGroup ref="fo:border-precedence-properties"/>
        <xs:attributeGroup ref="fo:aural-properties"/>
        <xs:attributeGroup ref="fo:box-size-properties"/>
        <xs:attributeGroup ref="fo:margin-properties-inline"/>
        <xs:attributeGroup ref="fo:area-properties"/>
        <xs:attributeGroup ref="fo:area-alignment-properties-inline"/>
        <xs:attributeGroup ref="fo:character-properties"/>
        <xs:attributeGroup ref="fo:table-properties"/>
        <xs:attributeGroup ref="fo:list-properties"/>
        <xs:attributeGroup ref="fo:float-properties"/>
        <xs:attributeGroup ref="fo:line-related-properties"/>
        <xs:attributeGroup ref="fo:leader-properties"/>
        <xs:attributeGroup ref="fo:keeps-and-breaks-properties-block"/>
        <xs:attributeGroup ref="fo:hyphenation-properties-block"/>
        <xs:attributeGroup ref="fo:visibility-properties"/>
    </xs:attributeGroup>
    <xs:attributeGroup name="block-properties">
        <xs:attribute name="id"/>
        <xs:attributeGroup ref="fo:inheritable-properties"/>
    </xs:attributeGroup>
    <xs:attributeGroup name="inline-properties">
        <xs:attribute name="id"/>
        <xs:attributeGroup ref="fo:inheritable-properties"/>
    </xs:attributeGroup>
    <xs:attributeGroup name="empty-inline-properties">
        <xs:attribute name="id"/>
        <xs:attribute name="color">
            <xs:annotation>
                <xs:documentation>
                    Specifies the color of text. Valid values include hexadecimal colors (#RGB, #RRGGBB), RGB/RGBA colors, named colors, and "inherit".
                    Examples: "#ff0000", "rgb(255,0,0)", "red", "inherit".
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="fo:color_Type"/>
            </xs:simpleType>
        </xs:attribute>
        <xs:attributeGroup ref="fo:accessibility-properties"/>
        <xs:attributeGroup ref="fo:aural-properties"/>
        <xs:attributeGroup ref="fo:relative-position-properties"/>
        <xs:attributeGroup ref="fo:area-alignment-properties-inline"/>
        <xs:attributeGroup ref="fo:character-properties"/>
        <xs:attributeGroup ref="fo:border-padding-background-properties"/>
        <xs:attributeGroup ref="fo:hyphenation-properties-inline"/>
        <xs:attributeGroup ref="fo:visibility-properties"/>
    </xs:attributeGroup>
    <xs:attributeGroup name="graphic-properties">
        <xs:annotation>
            <xs:documentation>
                Defines attributes for graphic elements (external-graphic and instream-foreign-object). These properties
                control how graphics are sized, scaled, aligned, and displayed within the document.
            </xs:documentation>
        </xs:annotation>
        <xs:attribute name="id">
            <xs:annotation>
                <xs:documentation>
                    Specifies a unique identifier for the graphic element.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="content-type">
            <xs:annotation>
                <xs:documentation>
                    Specifies the MIME type of the graphic content (e.g., "image/jpeg", "image/svg+xml").
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attributeGroup ref="fo:accessibility-properties"/>
        <xs:attributeGroup ref="fo:relative-position-properties"/>
        <xs:attributeGroup ref="fo:aural-properties"/>
        <xs:attributeGroup ref="fo:border-padding-background-properties"/>
        <xs:attributeGroup ref="fo:margin-properties-inline"/>
        <xs:attributeGroup ref="fo:area-alignment-properties-inline"/>
        <xs:attributeGroup ref="fo:box-size-properties"/>
        <xs:attributeGroup ref="fo:font-properties"/>
        <xs:attributeGroup ref="fo:line-height-properties"/>
        <xs:attributeGroup ref="fo:keeps-and-breaks-properties-atomic"/>
        <xs:attribute name="content-height">
            <xs:annotation>
                <xs:documentation>
                    Specifies the height of the graphic content. Can be a length, a percentage, or "auto" (default).
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="content-width">
            <xs:annotation>
                <xs:documentation>
                    Specifies the width of the graphic content. Can be a length, a percentage, or "auto" (default).
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="display-align">
            <xs:annotation>
                <xs:documentation>
                    Specifies the alignment of content within the display area when the content area is larger than the content.
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="auto"/>
                    <xs:enumeration value="before"/>
                    <xs:enumeration value="center"/>
                    <xs:enumeration value="after"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="overflow">
            <xs:annotation>
                <xs:documentation>
                    Specifies what happens when content overflows the allocated area.
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="visible"/>
                    <xs:enumeration value="hidden"/>
                    <xs:enumeration value="scroll"/>
                    <xs:enumeration value="auto"/>
                    <xs:enumeration value="error-if-overflow"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="scaling">
            <xs:annotation>
                <xs:documentation>
                    Specifies how the graphic should be scaled to fit the specified dimensions. "uniform" preserves the aspect ratio, while "non-uniform" may distort the image.
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="uniform"/>
                    <xs:enumeration value="non-uniform"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="scaling-method">
            <xs:annotation>
                <xs:documentation>
                    Specifies the method used for scaling the graphic.
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="auto"/>
                    <xs:enumeration value="integer-pixels"/>
                    <xs:enumeration value="resample-any-method"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="text-align">
            <xs:annotation>
                <xs:documentation>
                    Specifies the alignment of text within the graphic area.
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="start"/>
                    <xs:enumeration value="center"/>
                    <xs:enumeration value="end"/>
                    <xs:enumeration value="justify"/>
                    <xs:enumeration value="inside"/>
                    <xs:enumeration value="outside"/>
                    <xs:enumeration value="left"/>
                    <xs:enumeration value="right"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:element name="root">
        <xs:annotation>
            <xs:documentation>
                The root element of an XSL-FO document. It contains all the formatting objects that make up the document, including layout masters, declarations, and page sequences.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element minOccurs="0" ref="fox:document-info">
                    <xs:annotation>
                        <xs:documentation>
                            Contains metadata information about the document, such as title, author, and keywords.
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element minOccurs="0" ref="fox:accessibility">
                    <xs:annotation>
                        <xs:documentation>
                            Contains settings related to document accessibility features.
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element minOccurs="0" ref="fox:pdf-security">
                    <xs:annotation>
                        <xs:documentation>
                            Contains security settings for PDF output, such as encryption and permissions.
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element ref="fo:layout-master-set">
                    <xs:annotation>
                        <xs:documentation>
                            Contains all the page masters that define the layout of pages in the document.
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element minOccurs="0" ref="fo:declarations">
                    <xs:annotation>
                        <xs:documentation>
                            Contains declarations that apply to the entire document, such as color profiles.
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element maxOccurs="unbounded" ref="fo:page-sequence">
                    <xs:annotation>
                        <xs:documentation>
                            Defines a sequence of pages with content. A document can have multiple page sequences.
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
            </xs:sequence>
            <xs:attribute name="media-usage">
                <xs:annotation>
                    <xs:documentation>
                        Specifies how the formatted result is intended to be used. Values include: auto, paginate, bounded-in-one-dimension, and unbounded.
                    </xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:token">
                        <xs:enumeration value="auto"/>
                        <xs:enumeration value="paginate"/>
                        <xs:enumeration value="bounded-in-one-dimension"/>
                        <xs:enumeration value="unbounded"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attributeGroup ref="fo:inheritable-properties"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="declarations">
        <xs:annotation>
            <xs:documentation>
                Contains declarations that apply to the entire document, such as color profiles and metadata. These declarations are used by the formatting process but do not directly generate any content.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:choice minOccurs="0" maxOccurs="unbounded">
                    <xs:element ref="fo:color-profile"/>
                    <xs:element ref="x:xmpmeta"/>
                </xs:choice>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="color-profile">
        <xs:annotation>
            <xs:documentation>
                Defines a color profile for use in the document. Color profiles are used for color management to ensure consistent color reproduction across different devices and media.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="src" use="required">
                <xs:annotation>
                    <xs:documentation>
                        Specifies the URI of the color profile resource (typically an ICC profile).
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="color-profile-name" use="required">
                <xs:annotation>
                    <xs:documentation>
                        Specifies the name of the color profile, which is used to reference the profile from other parts of the document.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="rendering-intent">
                <xs:annotation>
                    <xs:documentation>
                        Specifies the rendering intent to be used when converting colors. Common values include: perceptual, relative-colorimetric, saturation, and absolute-colorimetric.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="layout-master-set">
        <xs:annotation>
            <xs:documentation>
                Contains all the page masters that define the layout of pages in the document. Page masters define the size, margins, and regions of pages.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element minOccurs="0" maxOccurs="unbounded" ref="fo:page-sequence-master">
                    <xs:annotation>
                        <xs:documentation>
                            Defines a sequence of page masters to be used for formatting a page sequence.
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element ref="fo:simple-page-master">
                    <xs:annotation>
                        <xs:documentation>
                            Defines a simple page layout with regions for content.
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:choice minOccurs="0" maxOccurs="unbounded">
                    <xs:element ref="fo:simple-page-master"/>
                    <xs:element ref="fo:page-sequence-master"/>
                </xs:choice>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="page-sequence-master">
        <xs:annotation>
            <xs:documentation>
                Defines a sequence of page masters to be used for formatting a page sequence. This allows for different page layouts to be used for different pages in a sequence, such as different layouts for first, even, and odd pages.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:choice maxOccurs="unbounded">
                <xs:element ref="fo:single-page-master-reference">
                    <xs:annotation>
                        <xs:documentation>
                            References a single page master to be used once in the sequence.
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element ref="fo:repeatable-page-master-reference">
                    <xs:annotation>
                        <xs:documentation>
                            References a page master that can be used multiple times in the sequence.
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element ref="fo:repeatable-page-master-alternatives">
                    <xs:annotation>
                        <xs:documentation>
                            Defines a set of alternative page masters that can be used based on conditions.
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
            </xs:choice>
            <xs:attribute name="master-name" use="required">
                <xs:annotation>
                    <xs:documentation>
                        Specifies the name of the page sequence master, which is used to reference it from a page-sequence.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="single-page-master-reference">
        <xs:annotation>
            <xs:documentation>
                References a single page master to be used once in a page sequence. This is typically used for pages that appear only once, such as a title page.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="master-reference" use="required">
                <xs:annotation>
                    <xs:documentation>
                        Specifies the name of the simple-page-master being referenced.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="repeatable-page-master-reference">
        <xs:annotation>
            <xs:documentation>
                References a page master that can be used multiple times in a page sequence. This is typically used for pages that have the same layout, such as body pages.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="master-reference" use="required">
                <xs:annotation>
                    <xs:documentation>
                        Specifies the name of the simple-page-master being referenced.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="maximum-repeats">
                <xs:annotation>
                    <xs:documentation>
                        Specifies the maximum number of times the referenced page master can be used. If not specified, there is no limit.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="repeatable-page-master-alternatives">
        <xs:annotation>
            <xs:documentation>
                Defines a set of alternative page masters that can be used based on conditions. This allows for different page layouts to be used based on page position (first, last, even, odd) or blank pages.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" ref="fo:conditional-page-master-reference">
                    <xs:annotation>
                        <xs:documentation>
                            References a page master to be used when certain conditions are met.
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
            </xs:sequence>
            <xs:attribute name="maximum-repeats">
                <xs:annotation>
                    <xs:documentation>
                        Specifies the maximum number of times the set of alternatives can be used. If not specified, there is no limit.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="conditional-page-master-reference">
        <xs:annotation>
            <xs:documentation>
                References a page master to be used when certain conditions are met. This allows for different page layouts to be used based on page position (first, last, rest), page number (odd, even), and content (blank, not-blank).
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="master-reference" use="required">
                <xs:annotation>
                    <xs:documentation>
                        Specifies the name of the simple-page-master being referenced.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="page-position">
                <xs:annotation>
                    <xs:documentation>
                        Specifies the position of the page in the sequence. Values include: first (first page), last (last page), rest (all pages except first and last), any (any position), and inherit.
                    </xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:token">
                        <xs:enumeration value="first"/>
                        <xs:enumeration value="last"/>
                        <xs:enumeration value="rest"/>
                        <xs:enumeration value="any"/>
                        <xs:enumeration value="inherit"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="odd-or-even">
                <xs:annotation>
                    <xs:documentation>
                        Specifies whether the page is odd-numbered or even-numbered. Values include: odd, even, any, and inherit.
                    </xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:token">
                        <xs:enumeration value="odd"/>
                        <xs:enumeration value="even"/>
                        <xs:enumeration value="any"/>
                        <xs:enumeration value="inherit"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="blank-or-not-blank">
                <xs:annotation>
                    <xs:documentation>
                        Specifies whether the page is blank or not. Values include: blank (page has no content), not-blank (page has content), any, and inherit.
                    </xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:token">
                        <xs:enumeration value="blank"/>
                        <xs:enumeration value="not-blank"/>
                        <xs:enumeration value="any"/>
                        <xs:enumeration value="inherit"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="simple-page-master">
        <xs:annotation>
            <xs:documentation>
                Defines a simple page layout with specific dimensions, margins, and regions. Each simple-page-master represents a single page layout that can be used in a document.

                The simple-page-master contains one required region (region-body) and four optional regions (region-before, region-after, region-start, region-end) that define different areas of the page.

                The master-name attribute is used to reference this page master from a page-sequence or page-sequence-master.

                Page dimensions can be specified using page-height and page-width attributes, or using the size attribute with predefined paper sizes.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="fo:region-body"/>
                <xs:element minOccurs="0" ref="fo:region-before"/>
                <xs:element minOccurs="0" ref="fo:region-after"/>
                <xs:element minOccurs="0" ref="fo:region-start"/>
                <xs:element minOccurs="0" ref="fo:region-end"/>
            </xs:sequence>
            <xs:attributeGroup ref="fo:margin-properties-CSS"/>
            <xs:attribute name="master-name" use="required">
                <xs:annotation>
                    <xs:documentation>
                        Specifies the name of the page master, which is used to reference it from a page-sequence or page-sequence-master.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="page-height">
                <xs:annotation>
                    <xs:documentation>
                        Specifies the height of the page. Can be specified as a length (e.g., "29.7cm" for A4) or as "auto".
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="page-width">
                <xs:annotation>
                    <xs:documentation>
                        Specifies the width of the page. Can be specified as a length (e.g., "21cm" for A4) or as "auto".
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="size">
                <xs:annotation>
                    <xs:documentation>
                        Specifies both the page width and height as a named size (e.g., "A4", "Letter") or as two lengths (e.g., "21cm 29.7cm").
                        This is an alternative to specifying page-width and page-height separately.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="reference-orientation">
                <xs:annotation>
                    <xs:documentation>
                        Specifies the rotation of the coordinate system for the page. The value is the number of degrees of rotation (clockwise) applied to the reference-orientation.
                        Common values include 0 (no rotation), 90, 180, and 270 degrees. Can be specified with or without the "deg" suffix.
                    </xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:token">
                        <xs:enumeration value="0"/>
                        <xs:enumeration value="90"/>
                        <xs:enumeration value="180"/>
                        <xs:enumeration value="270"/>
                        <xs:enumeration value="-90"/>
                        <xs:enumeration value="-180"/>
                        <xs:enumeration value="-270"/>
                        <xs:enumeration value="0deg"/>
                        <xs:enumeration value="90deg"/>
                        <xs:enumeration value="180deg"/>
                        <xs:enumeration value="270deg"/>
                        <xs:enumeration value="-90deg"/>
                        <xs:enumeration value="-180deg"/>
                        <xs:enumeration value="-270deg"/>
                        <xs:enumeration value="inherit"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="writing-mode">
                <xs:annotation>
                    <xs:documentation>
                        Specifies the direction of content flow for text in the page. Values include:
                        - lr-tb: Left to right, top to bottom (default for most Western languages)
                        - rl-tb: Right to left, top to bottom (for languages like Arabic and Hebrew)
                        - tb-rl: Top to bottom, right to left (for languages like traditional Japanese)
                        - lr, rl, tb: Abbreviated forms of the above
                        - inherit: Inherits the writing mode from the parent element
                    </xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:token">
                        <xs:enumeration value="lr-tb"/>
                        <xs:enumeration value="rl-tb"/>
                        <xs:enumeration value="tb-rl"/>
                        <xs:enumeration value="lr"/>
                        <xs:enumeration value="rl"/>
                        <xs:enumeration value="tb"/>
                        <xs:enumeration value="inherit"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:attributeGroup name="region-properties">
        <xs:attributeGroup ref="fo:border-padding-background-properties"/>
        <xs:attributeGroup ref="fo:area-properties"/>
        <xs:attribute name="region-name"/>
    </xs:attributeGroup>
    <xs:element name="region-body">
        <xs:annotation>
            <xs:documentation>
                This region specifies a viewport/reference pair that is located in the "center" of the fo:simple-page-master. The region-body is the main content area of a page.

                The region-body is where the main flow content of a document is placed. Unlike the other regions (region-before, region-after, region-start, region-end), which are typically used for headers, footers, and side content, the region-body can contain flowing content that spans multiple pages.

                Key attributes include:
                - column-count: Specifies the number of columns in the region
                - column-gap: Specifies the gap between columns
                - margin properties: Define the space between the region-body and the surrounding regions
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attributeGroup ref="fo:region-properties"/>
            <xs:attributeGroup ref="fo:margin-properties-CSS"/>
            <xs:attribute name="column-count"/>
            <xs:attribute name="column-gap"/>
        </xs:complexType>
    </xs:element>
    <xs:attributeGroup name="side-region-properties">
        <xs:attributeGroup ref="fo:region-properties"/>
        <xs:attribute name="extent" use="required"/>
        <xs:attribute name="precedence">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="true"/>
                    <xs:enumeration value="false"/>
                    <xs:enumeration value="inherit"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:element name="region-before">
        <xs:annotation>
            <xs:documentation>
                This region defines a viewport that is located on the "before" side of the fo:region-body region. In Western writing modes, this corresponds to the top of the page and is typically used for headers.

                The region-before is one of the four side regions that can surround the region-body. Content in this region is typically static (defined by fo:static-content) and repeats on multiple pages.

                Key attributes include:
                - extent: Specifies the size of the region (required)
                - precedence: Determines how this region interacts with adjacent regions at corners
                - region-name: Identifies the region for associating static content
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attributeGroup ref="fo:side-region-properties"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="region-after">
        <xs:annotation>
            <xs:documentation>
                This region defines a viewport that is located on the "after" side of the fo:region-body region. In Western writing modes, this corresponds to the bottom of the page and is typically used for footers.

                The region-after is one of the four side regions that can surround the region-body. Content in this region is typically static (defined by fo:static-content) and repeats on multiple pages.

                Key attributes include:
                - extent: Specifies the size of the region (required)
                - precedence: Determines how this region interacts with adjacent regions at corners
                - region-name: Identifies the region for associating static content
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attributeGroup ref="fo:side-region-properties"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="region-start">
        <xs:annotation>
            <xs:documentation>
                This region defines a viewport that is located on the "start" side of the fo:region-body region. In left-to-right writing modes, this corresponds to the left side of the page, while in right-to-left writing modes, it corresponds to the right side.

                The region-start is one of the four side regions that can surround the region-body. Content in this region is typically static (defined by fo:static-content) and repeats on multiple pages. This region is commonly used for side margins, notes, or navigation elements.

                Key attributes include:
                - extent: Specifies the size of the region (required)
                - precedence: Determines how this region interacts with adjacent regions at corners
                - region-name: Identifies the region for associating static content
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attributeGroup ref="fo:side-region-properties"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="region-end">
        <xs:annotation>
            <xs:documentation>
                This region defines a viewport that is located on the "end" side of the fo:region-body region. In left-to-right writing modes, this corresponds to the right side of the page, while in right-to-left writing modes, it corresponds to the left side.

                The region-end is one of the four side regions that can surround the region-body. Content in this region is typically static (defined by fo:static-content) and repeats on multiple pages. This region is commonly used for side margins, notes, or navigation elements.

                Key attributes include:
                - extent: Specifies the size of the region (required)
                - precedence: Determines how this region interacts with adjacent regions at corners
                - region-name: Identifies the region for associating static content
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attributeGroup ref="fo:side-region-properties"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="page-sequence">
        <xs:annotation>
            <xs:documentation>
                Defines a sequence of pages with the same layout and content flow. A page-sequence represents a logical section of the document, such as a chapter, and specifies how content flows across multiple pages.

                The page-sequence references a page master or page-sequence-master through its master-reference attribute, which determines the layout of the pages in the sequence.

                A page-sequence typically contains:
                - An optional title element that defines the document or section title
                - Zero or more static-content elements for headers, footers, and other repeating content
                - One flow element that contains the main content that flows across pages
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element minOccurs="0" ref="fo:title"/>
                <xs:element minOccurs="0" maxOccurs="unbounded" ref="fo:static-content"/>
                <xs:element ref="fo:flow"/>
            </xs:sequence>
            <xs:attribute name="id">
                <xs:annotation>
                    <xs:documentation>
                        Specifies a unique identifier for the page-sequence, which can be used for referencing or linking to this section of the document.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="master-reference" use="required">
                <xs:annotation>
                    <xs:documentation>
                        Specifies the name of the page-master or page-sequence-master that defines the layout for this sequence of pages. This attribute is required and must reference a master-name defined in the layout-master-set.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="initial-page-number">
                <xs:annotation>
                    <xs:documentation>
                        Specifies the initial page number for this sequence. Values can be a number, "auto", "auto-odd", "auto-even", or "inherit". If not specified, page numbering continues from the previous sequence.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="force-page-count">
                <xs:annotation>
                    <xs:documentation>
                        Controls whether the page sequence should end with an even or odd number of pages. This is useful for double-sided printing where chapters typically start on odd-numbered pages.
                    </xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:token">
                        <xs:enumeration value="auto"/>
                        <xs:enumeration value="even"/>
                        <xs:enumeration value="odd"/>
                        <xs:enumeration value="end-on-even"/>
                        <xs:enumeration value="end-on-odd"/>
                        <xs:enumeration value="no-force"/>
                        <xs:enumeration value="inherit"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="format">
                <xs:annotation>
                    <xs:documentation>
                        Specifies the format for page numbers. Common values include "1" for decimal numbers, "i" for lowercase Roman numerals, "I" for uppercase Roman numerals, "a" for lowercase letters, and "A" for uppercase letters.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="letter-value">
                <xs:annotation>
                    <xs:documentation>
                        Specifies how alphabetic numbering should be interpreted when the format attribute specifies an alphabetic sequence. This is particularly relevant for languages with different alphabetic traditions.
                    </xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:token">
                        <xs:enumeration value="auto"/>
                        <xs:enumeration value="alphabetic"/>
                        <xs:enumeration value="traditional"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="grouping-separator">
                <xs:annotation>
                    <xs:documentation>
                        Specifies the character used as a grouping separator for page numbers (e.g., the comma in "1,000").
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="grouping-size">
                <xs:annotation>
                    <xs:documentation>
                        Specifies the number of digits that are grouped together between grouping separators (e.g., "3" for grouping thousands).
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attributeGroup ref="fo:inheritable-properties"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="title">
        <xs:annotation>
            <xs:documentation>
                Defines the title of the document or a section. This element is typically used within a page-sequence to specify the document title, which may be displayed in the browser title bar, bookmarks, or other user interface elements.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:choice minOccurs="0" maxOccurs="unbounded">
                <xs:element ref="fo:basic-inlines"/>
                <xs:element ref="fo:wrappers"/>
            </xs:choice>
            <xs:attributeGroup ref="fo:inheritable-properties"/>
        </xs:complexType>
    </xs:element>
    <xs:attributeGroup name="flow-properties">
        <xs:annotation>
            <xs:documentation>
                Defines attributes common to flow and static-content elements. These properties control the identification and behavior of content flows in the document.
            </xs:documentation>
        </xs:annotation>
        <xs:attribute name="id">
            <xs:annotation>
                <xs:documentation>
                    Specifies a unique identifier for the flow or static-content element.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="flow-name" use="required">
            <xs:annotation>
                <xs:documentation>
                    Specifies the name of the flow or static-content. This name is used to associate the flow with a region in a page-master. Common values include "xsl-region-body", "xsl-region-before", "xsl-region-after", "xsl-region-start", and "xsl-region-end".
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attributeGroup ref="fo:inheritable-properties"/>
    </xs:attributeGroup>
    <xs:element name="static-content">
        <xs:annotation>
            <xs:documentation>
                Defines content that is repeated on multiple pages, such as headers, footers, or sidebars. The static-content is associated with a region in the page-master through its flow-name attribute.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" ref="fo:blocks"/>
            </xs:sequence>
            <xs:attributeGroup ref="fo:flow-properties"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="flow">
        <xs:annotation>
            <xs:documentation>
                Defines the main content of the document that flows across multiple pages. The flow is associated with a region in the page-master through its flow-name attribute, typically "xsl-region-body".
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:choice maxOccurs="unbounded">
                <xs:element ref="fo:blocks"/>
            </xs:choice>
            <xs:attributeGroup ref="fo:flow-properties"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="block" substitutionGroup="fo:basic-blocks">
        <xs:annotation>
            <xs:documentation>
                The fundamental building block for text layout in XSL-FO. A block creates a rectangular area of content with borders, padding, and margins. Blocks are stacked vertically in the normal flow of content.

                Blocks can contain text, inline elements, other blocks, or a mixture of these. Common uses include paragraphs, headings, list items, and table cells.

                Key properties include text alignment, indentation, spacing, borders, and background.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:choice minOccurs="0" maxOccurs="unbounded">
                <xs:element ref="fo:initial-property-set"/>
                <xs:element ref="fo:basic-inlines"/>
                <xs:element ref="fo:basic-blocks"/>
                <xs:element ref="fo:out-of-lines"/>
                <xs:element ref="fo:wrappers"/>
            </xs:choice>
            <xs:attributeGroup ref="fo:block-properties"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="block-container" substitutionGroup="fo:basic-blocks">
        <xs:annotation>
            <xs:documentation>
                A container for block-level elements that establishes a new reference area with its own coordinate system.

                The block-container is used to position blocks absolutely or relatively, to change writing direction,
                or to create a container with specific dimensions. Unlike a simple block, a block-container can have
                its content positioned in ways that are not part of the normal flow.

                Common uses include creating sidebars, callouts, or multi-column layouts.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" ref="fo:blocks"/>
            </xs:sequence>
            <xs:attributeGroup ref="fo:block-properties"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="bidi-override" substitutionGroup="fo:basic-inlines">
        <xs:annotation>
            <xs:documentation>
                The fo:bidi-override inline formatting object is used to override the default Unicode bidirectional algorithm direction for text. This is particularly important for mixed-language documents that contain both left-to-right and right-to-left scripts.

                When text contains multiple scripts with different writing directions (such as English and Arabic), the Unicode bidirectional algorithm determines how the text should flow. The bidi-override element allows explicit control over this behavior when the default algorithm doesn't produce the desired result.

                The direction property specifies whether the text should be treated as left-to-right or right-to-left, overriding the natural direction of the characters.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:group minOccurs="0" maxOccurs="unbounded" ref="fo:inlines"/>
            <xs:attributeGroup ref="fo:inline-properties"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="character" substitutionGroup="fo:basic-inlines">
        <xs:annotation>
            <xs:documentation>
                The fo:character formatting object represents a single character that is mapped to a glyph for presentation. This element is used when specific control over the presentation of an individual character is needed.

                Unlike simply including a character in text content, the fo:character element allows for precise control over how the character is rendered, including its alignment, size, and other formatting properties.

                Common uses include inserting special characters, symbols, or decorative elements with specific styling that differs from the surrounding text.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="character" use="required"/>
            <xs:attributeGroup ref="fo:empty-inline-properties"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="initial-property-set">
        <xs:annotation>
            <xs:documentation>
                The fo:initial-property-set formatting object specifies formatting properties for the first line of an fo:block. This allows for special styling of the first line of a paragraph or other block-level element.

                This element is used within an fo:block element and applies its properties only to the first line of text in that block. It provides a way to create typographic effects like drop caps or differently styled first lines without having to manually wrap the first line in an inline element.

                Common uses include creating newspaper-style or magazine-style formatting where the first line of a paragraph has different styling (such as all caps, bold, or a different font) from the rest of the paragraph.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attributeGroup ref="fo:empty-inline-properties"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="external-graphic" substitutionGroup="fo:basic-inlines">
        <xs:annotation>
            <xs:documentation>
                Used to include external images in the document. The external-graphic element references an image file
                through its src attribute and displays it inline with the surrounding content.

                Supported image formats typically include PNG, JPEG, GIF, SVG, and others depending on the FO processor.

                Key properties include content-width, content-height, scaling, and overflow handling.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attributeGroup ref="fo:graphic-properties"/>
            <xs:attribute name="src">
                <xs:annotation>
                    <xs:documentation>
                        Specifies the URI of the external graphic resource to be included.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="instream-foreign-object" substitutionGroup="fo:basic-inlines">
        <xs:annotation>
            <xs:documentation>
                Used to include non-XSL-FO XML content directly within the document. Unlike external-graphic, which references
                an external file, instream-foreign-object contains the XML content directly within the FO document.

                Common uses include embedding SVG graphics, MathML equations, or other XML vocabularies directly in the document.

                The embedded content must be in a namespace other than the XSL-FO namespace, and the FO processor must know
                how to render that content.

                Key properties are the same as for external-graphic: content-width, content-height, scaling, and overflow handling.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="fo:any">
                    <xs:attributeGroup ref="fo:graphic-properties"/>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="inline" substitutionGroup="fo:basic-inlines">
        <xs:annotation>
            <xs:documentation>
                The fundamental inline formatting object for text styling and formatting. The inline element is used to apply
                formatting to a portion of text within the flow of content, without breaking the flow.

                Inline elements can contain text, other inline elements, or even block-level elements (when using inline-container).
                Common uses include applying bold or italic styling, changing font or color for a span of text, or creating hyperlinks.

                Key properties include font characteristics, text decoration, color, and alignment.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:group minOccurs="0" maxOccurs="unbounded" ref="fo:mixed-level"/>
            <xs:attributeGroup ref="fo:inline-properties"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="inline-container" substitutionGroup="fo:basic-inlines">
        <xs:annotation>
            <xs:documentation>
                The fo:inline-container formatting object generates an inline reference area that can contain block-level elements. This allows block elements to be embedded within inline content, creating complex nested layouts.

                Unlike normal inline elements, which can only contain other inline elements, the inline-container can contain blocks, allowing for rich formatting structures within a line of text. This is similar to how an inline-block works in CSS.

                Common uses include creating floating boxes within text, sidebars that align with specific text, or complex formatting structures that need to be positioned inline with surrounding content.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element minOccurs="0" maxOccurs="unbounded" ref="fo:blocks"/>
            </xs:sequence>
            <xs:attributeGroup ref="fo:inline-properties"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="leader" substitutionGroup="fo:basic-inlines">
        <xs:annotation>
            <xs:documentation>
                Used to create a leader - a visual pattern that fills the available space. Leaders are commonly used in
                tables of contents to connect entries with page numbers, or to create horizontal rules or decorative elements.

                The pattern of the leader is controlled by the leader-pattern property, which can be set to "space" (default),
                "dots", "rule", or "use-content". The "use-content" value allows custom patterns using the content of the leader element.

                Other important properties include leader-length, leader-pattern-width, and rule-thickness (for rule patterns).
            </xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:group minOccurs="0" maxOccurs="unbounded" ref="fo:inlines"/>
            <xs:attributeGroup ref="fo:inline-properties"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="page-number" substitutionGroup="fo:basic-inlines">
        <xs:annotation>
            <xs:documentation>
                The fo:page-number formatting object is used to represent the current page number. When rendered, it is replaced with the actual page number of the page on which it appears.

                This element is commonly used in headers, footers, and table of contents to display the current page number. The format of the page number (decimal, roman, alphabetic) is controlled by the format property of the containing page-sequence.

                Unlike static text, the page-number element automatically updates to show the correct page number as the document is paginated, making it essential for proper document navigation.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attributeGroup ref="fo:empty-inline-properties"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="page-number-citation" substitutionGroup="fo:basic-inlines">
        <xs:annotation>
            <xs:documentation>
                The fo:page-number-citation formatting object is used to reference the page number of another element in the document. When rendered, it is replaced with the actual page number of the page containing the element with the specified ID.

                This element is essential for creating cross-references and table of contents entries that include page numbers. It allows for dynamic references to other parts of the document, with the page numbers automatically updating if the document's pagination changes.

                The ref-id attribute specifies the ID of the element whose page number should be displayed. This referenced element must have an id attribute with a matching value.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attributeGroup ref="fo:empty-inline-properties"/>
            <xs:attribute name="ref-id" use="required"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="table-and-caption" substitutionGroup="fo:basic-blocks">
        <xs:annotation>
            <xs:documentation>
                The fo:table-and-caption flow object is used for formatting a table together with its caption. This element provides a way to associate a caption with a table and control their layout as a single unit.

                The caption can be positioned relative to the table (typically above or below) and both the table and caption are treated as a single formatting object for layout purposes.

                This element contains an optional fo:table-caption element followed by a required fo:table element.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element minOccurs="0" ref="fo:table-caption"/>
                <xs:element ref="fo:table"/>
            </xs:sequence>
            <xs:attributeGroup ref="fo:block-properties"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="table-caption">
        <xs:annotation>
            <xs:documentation>
                The fo:table-caption formatting object is used to contain block-level formatting objects that represent the caption for a table. It is used only within the fo:table-and-caption element.

                The caption typically provides a title, description, or other information about the table. It can contain any block-level formatting objects, allowing for rich formatting of the caption text.

                The position of the caption relative to the table (above, below, etc.) is controlled by properties on the parent fo:table-and-caption element.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" ref="fo:blocks"/>
            </xs:sequence>
            <xs:attributeGroup ref="fo:block-properties"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="table" substitutionGroup="fo:basic-blocks">
        <xs:annotation>
            <xs:documentation>
                The fo:table flow object is used for formatting tabular material. Tables consist of columns and rows of cells containing content.

                The table model in XSL-FO is based on the HTML/CSS table model, with some extensions. Tables can have headers, footers, and bodies,
                and can include column specifications that control the width and appearance of columns.

                Tables can be used for data presentation, layout purposes, or any content that needs to be arranged in rows and columns.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element minOccurs="0" maxOccurs="unbounded" ref="fo:table-column"/>
                <xs:element minOccurs="0" ref="fo:table-header"/>
                <xs:element minOccurs="0" ref="fo:table-footer"/>
                <xs:element maxOccurs="unbounded" ref="fo:table-body"/>
            </xs:sequence>
            <xs:attributeGroup ref="fo:block-properties"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="table-column">
        <xs:annotation>
            <xs:documentation>
                The fo:table-column formatting object specifies characteristics applicable to table cells that have the same column and span. It is used to define properties for an entire column without having to specify those properties for each cell in the column.

                Key attributes include:
                - column-number: Specifies the column position in the table
                - column-width: Defines the width of the column
                - number-columns-repeated: Allows a single column specification to apply to multiple adjacent columns
                - number-columns-spanned: Specifies how many columns this specification spans

                Table columns do not contain content directly; they only define properties that apply to cells in those columns.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="column-number"/>
            <xs:attribute name="column-width"/>
            <xs:attribute name="number-columns-repeated"/>
            <xs:attribute name="number-columns-spanned"/>
            <xs:attributeGroup ref="fo:inheritable-properties"/>
        </xs:complexType>
    </xs:element>
    <xs:complexType name="row-group">
        <xs:choice>
            <xs:element maxOccurs="unbounded" ref="fo:table-row"/>
            <xs:element maxOccurs="unbounded" ref="fo:table-cell"/>
        </xs:choice>
    </xs:complexType>
    <xs:element name="table-header">
        <xs:annotation>
            <xs:documentation>
                The fo:table-header formatting object is used to contain the content of the table header. The header typically contains column labels or other information that helps identify the content of the columns.

                The table header can contain either table-row elements or table-cell elements directly. When a table spans multiple pages, the header content may be repeated at the top of each page, depending on the formatter's capabilities.

                The header is semantically distinct from the table body, which allows for different styling and behavior, such as repeating the header on each page of a multi-page table.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="fo:row-group">
                    <xs:attribute name="id"/>
                    <xs:attributeGroup ref="fo:inheritable-properties"/>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="table-footer">
        <xs:annotation>
            <xs:documentation>
                The fo:table-footer formatting object is used to contain the content of the table footer. The footer typically contains summary information, totals, or other concluding information related to the table data.

                Like the table header, the footer can contain either table-row elements or table-cell elements directly. When a table spans multiple pages, the footer content may be repeated at the bottom of each page or appear only on the last page, depending on the formatter's capabilities.

                The footer is semantically distinct from the table body and header, which allows for different styling and behavior, such as special formatting for summary rows or totals.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="fo:row-group">
                    <xs:attribute name="id"/>
                    <xs:attributeGroup ref="fo:inheritable-properties"/>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="table-body">
        <xs:annotation>
            <xs:documentation>
                The fo:table-body formatting object is used to contain the main content of the table. It represents the primary data area of the table, as distinct from the header and footer.

                A table must have at least one table-body element, and can have multiple table-body elements. Each table-body can contain either table-row elements or table-cell elements directly.

                When a table has multiple body sections, they are rendered in the order they appear in the document. This allows for grouping related rows together and applying different styles to different sections of the table.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="fo:row-group">
                    <xs:attribute name="id"/>
                    <xs:attributeGroup ref="fo:inheritable-properties"/>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="table-row">
        <xs:annotation>
            <xs:documentation>
                The fo:table-row formatting object is used to group table cells into rows. Each table row represents a horizontal line of cells in the table.

                Table rows must contain one or more table-cell elements. The cells within a row are arranged horizontally according to their column assignments.

                Properties applied to a table-row affect all cells within that row, allowing for consistent styling of entire rows (such as alternating background colors for rows to improve readability).
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" ref="fo:table-cell"/>
            </xs:sequence>
            <xs:attribute name="id"/>
            <xs:attributeGroup ref="fo:inheritable-properties"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="table-cell">
        <xs:annotation>
            <xs:documentation>
                The fo:table-cell formatting object is used to group content to be placed in a table cell. It represents an individual cell within a table row or directly within a table header, footer, or body.

                Table cells contain block-level formatting objects that represent the content of the cell. Each cell can contain multiple blocks, allowing for rich content within a single cell.

                Key attributes include:
                - column-number: Specifies the column position of this cell
                - number-columns-spanned: Allows a cell to span multiple columns (similar to HTML's colspan)
                - number-rows-spanned: Allows a cell to span multiple rows (similar to HTML's rowspan)
                - starts-row/ends-row: Indicates whether this cell starts or ends a row (useful when cells are specified directly in a table-body without table-row elements)

                Table cells can have borders, background colors, padding, and other properties that control their appearance.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" ref="fo:blocks"/>
            </xs:sequence>
            <xs:attributeGroup ref="fo:block-properties"/>
            <xs:attribute name="column-number"/>
            <xs:attribute name="ends-row">
                <xs:simpleType>
                    <xs:restriction base="xs:token">
                        <xs:enumeration value="true"/>
                        <xs:enumeration value="false"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="number-columns-spanned"/>
            <xs:attribute name="number-rows-spanned"/>
            <xs:attribute name="starts-row">
                <xs:simpleType>
                    <xs:restriction base="xs:token">
                        <xs:enumeration value="true"/>
                        <xs:enumeration value="false"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="list-block" substitutionGroup="fo:basic-blocks">
        <xs:annotation>
            <xs:documentation>
                The fo:list-block formatting object is used to format a list. It creates a block-level structure that contains a series of list items, each with a label and body.

                Lists in XSL-FO are more flexible than HTML lists, allowing for precise control over the formatting of labels and their relationship to the list item content.

                Common uses include bulleted lists, numbered lists, definition lists, and other structured content where items need to be labeled or enumerated.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" ref="fo:list-item"/>
            </xs:sequence>
            <xs:attributeGroup ref="fo:block-properties"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="list-item">
        <xs:annotation>
            <xs:documentation>
                The fo:list-item formatting object contains the label and the body of an item in a list. Each list item represents a single entry in the list.

                A list item must contain exactly one list-item-label element followed by exactly one list-item-body element. The label typically contains a bullet, number, or other marker, while the body contains the main content of the list item.

                Properties applied to a list-item affect both the label and body, allowing for consistent styling of entire list entries.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="fo:list-item-label"/>
                <xs:element ref="fo:list-item-body"/>
            </xs:sequence>
            <xs:attributeGroup ref="fo:block-properties"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="list-item-label">
        <xs:annotation>
            <xs:documentation>
                The fo:list-item-label formatting object contains the content of the label of a list-item. It is typically used to enumerate, identify, or adorn the list-item's body.

                Common examples of list item labels include:
                - Bullet points (?, ?, ?, etc.) for unordered lists
                - Numbers (1., 2., 3., etc.) or letters (a., b., c., etc.) for ordered lists
                - Terms or phrases for definition lists

                The label can contain any block-level formatting objects, allowing for rich formatting of the label content.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" ref="fo:blocks"/>
            </xs:sequence>
            <xs:attributeGroup ref="fo:block-properties"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="list-item-body">
        <xs:annotation>
            <xs:documentation>
                The fo:list-item-body formatting object contains the content of the body of a list-item. This is the main content part of the list item, as opposed to the label.

                The body can contain any block-level formatting objects, allowing for rich content within list items. This can include paragraphs, tables, nested lists, or other complex structures.

                The relationship between the list-item-body and its corresponding list-item-label (such as alignment and spacing) is controlled by properties on the parent list-block and list-item elements.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" ref="fo:blocks"/>
            </xs:sequence>
            <xs:attributeGroup ref="fo:block-properties"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="float" substitutionGroup="fo:out-of-lines">
        <xs:annotation>
            <xs:documentation>
                The fo:float formatting object serves two main purposes in document layout:

                1. It can be used to format related content into a separate area at the beginning of a page (or a following page), making it available to the reader without immediately interrupting the main content flow. This is useful for sidebars, callouts, or other supplementary content.

                2. It can be used to make an area float to one side (left or right), allowing normal content to flow alongside it. This is similar to the float property in CSS and is commonly used for images, tables, or other elements that should be positioned alongside text.

                Floats are considered "out-of-line" elements because they are removed from the normal content flow and positioned according to special rules.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" ref="fo:blocks"/>
            </xs:sequence>
            <xs:attributeGroup ref="fo:block-properties"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="footnote" substitutionGroup="fo:out-of-lines">
        <xs:annotation>
            <xs:documentation>
                The fo:footnote formatting object is used to produce a footnote citation and the corresponding footnote content. Footnotes are commonly used to provide additional information, references, or clarifications without interrupting the main flow of text.

                A footnote consists of two parts:
                1. A citation (reference) that appears in the main text flow, typically as a superscript number or symbol
                2. The footnote body that contains the actual footnote content, which appears at the bottom of the page

                The fo:footnote element must contain exactly one fo:inline element (for the citation) followed by exactly one fo:footnote-body element (for the footnote content).
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="fo:inline"/>
                <xs:element ref="fo:footnote-body"/>
            </xs:sequence>
            <xs:attributeGroup ref="fo:block-properties"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="footnote-body">
        <xs:annotation>
            <xs:documentation>
                The fo:footnote-body formatting object is used to generate the content of a footnote. It contains the actual text and other content that appears at the bottom of the page as the footnote.

                The footnote body can contain any block-level formatting objects, allowing for rich content within footnotes. This can include paragraphs, lists, tables, or other complex structures.

                The fo:footnote-body element is always used within an fo:footnote element, which connects the footnote content to its citation in the main text flow.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" ref="fo:blocks"/>
            </xs:sequence>
            <xs:attributeGroup ref="fo:block-properties"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="basic-link" substitutionGroup="fo:basic-inlines">
        <xs:annotation>
            <xs:documentation>
                The fo:basic-link formatting object is used for representing the start resource of a simple link. It creates hyperlinks in the output document, allowing users to navigate to other parts of the document or to external resources.

                Key attributes include:
                - external-destination: Specifies a URI for linking to resources outside the current document (e.g., web pages, files)
                - internal-destination: Specifies an ID reference for linking to locations within the current document
                - indicate-destination: Controls whether the link target should be indicated visually
                - show-destination: Determines whether the target appears in the same window/frame (replace) or in a new one (new)

                The content of a basic-link can include text, images, or other inline elements that serve as the clickable area of the link.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:group minOccurs="0" maxOccurs="unbounded" ref="fo:mixed-level"/>
            <xs:attributeGroup ref="fo:inline-properties"/>
            <xs:attribute name="external-destination"/>
            <xs:attribute name="internal-destination"/>
            <xs:attribute name="indicate-destination">
                <xs:simpleType>
                    <xs:restriction base="xs:token">
                        <xs:enumeration value="true"/>
                        <xs:enumeration value="false"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="show-destination">
                <xs:simpleType>
                    <xs:restriction base="xs:token">
                        <xs:enumeration value="replace"/>
                        <xs:enumeration value="new"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="destination-placement-offset"/>
            <xs:attribute name="target-processing-context"/>
            <xs:attribute name="target-presentation-context"/>
            <xs:attribute name="target-stylesheet"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="wrapper" substitutionGroup="fo:wrappers">
        <xs:annotation>
            <xs:documentation>
                The fo:wrapper formatting object is used to specify inherited properties for a group of formatting objects without affecting the structure of the document. It has no additional formatting semantics beyond applying properties to its children.

                Unlike block or inline elements, the wrapper does not create a new formatting structure or affect the flow of content. It simply serves as a container for applying common properties to a group of elements.

                Common uses include applying the same font, color, or other properties to a group of elements, or setting language or writing-mode properties for a section of content.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:group minOccurs="0" maxOccurs="unbounded" ref="fo:mixed-level"/>
            <xs:attribute name="id"/>
            <xs:attributeGroup ref="fo:inheritable-properties"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="marker" substitutionGroup="fo:wrappers">
        <xs:annotation>
            <xs:documentation>
                The fo:marker formatting object is used in conjunction with fo:retrieve-marker to produce running headers or footers. Markers allow content from the main flow to be captured and displayed in other regions of the page.

                A marker defines content that can be retrieved and displayed elsewhere in the document. The marker itself does not generate any visible output where it is defined; it only serves as a source of content for retrieve-marker elements.

                Markers are commonly used to display the current chapter title, section heading, or other context-sensitive information in page headers or footers.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:group minOccurs="0" maxOccurs="unbounded" ref="fo:mixed-level"/>
            <xs:attribute name="marker-class-name"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="retrieve-marker" substitutionGroup="fo:wrappers">
        <xs:annotation>
            <xs:documentation>
                The fo:retrieve-marker formatting object is used in conjunction with fo:marker to produce running headers or footers. It retrieves and displays content that was defined in a marker elsewhere in the document.

                Key attributes include:
                - retrieve-class-name: Identifies which class of markers to retrieve (must match the marker-class-name of a marker)
                - retrieve-position: Specifies which marker to retrieve when multiple markers of the same class exist on a page
                - retrieve-boundary: Defines the scope within which to search for markers (page, page-sequence, or document)

                Retrieve-marker elements are typically placed in static-content regions (headers or footers) to display context-sensitive information such as the current chapter title, section heading, or other content from the main flow.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="retrieve-class-name"/>
            <xs:attribute name="retrieve-position">
                <xs:simpleType>
                    <xs:restriction base="xs:token">
                        <xs:enumeration value="first-starting-within-page"/>
                        <xs:enumeration value="first-including-carryover"/>
                        <xs:enumeration value="last-starting-within-page"/>
                        <xs:enumeration value="last-ending-within-page"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="retrieve-boundary">
                <xs:simpleType>
                    <xs:restriction base="xs:token">
                        <xs:enumeration value="page"/>
                        <xs:enumeration value="page-sequence"/>
                        <xs:enumeration value="document"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
        </xs:complexType>
    </xs:element>


    <xs:element name="multi-switch" substitutionGroup="fo:wrappers">
        <xs:annotation>
            <xs:documentation>
                Wraps the specification of alternative sub-trees of formatting objects (each sub-tree being within an fo:multi-case), and controls the switching between alternatives.

                The fo:multi-switch element contains one or more fo:multi-case elements, each representing an alternative view of the content. Only one case is visible at a time.

                Switching between cases can be triggered by user interaction through fo:multi-toggle elements, allowing for interactive content in PDF and other formats.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" ref="fo:multi-case"/>
            </xs:sequence>
            <xs:attributeGroup ref="fo:inheritable-properties"/>
            <xs:attribute name="id">
                <xs:annotation>
                    <xs:documentation>
                        Specifies a unique identifier for the multi-switch, which can be used for referencing or targeting this element.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="auto-restore">
                <xs:annotation>
                    <xs:documentation>
                        Specifies whether to automatically restore the initial case when the user navigates away from this page. When set to "true", the multi-switch will return to its initial state when the page is revisited.
                    </xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:token">
                        <xs:enumeration value="true"/>
                        <xs:enumeration value="false"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="multi-case">
        <xs:annotation>
            <xs:documentation>
                Used to contain (within an fo:multi-switch) each alternative sub-tree of formatting objects among which the parent fo:multi-switch will choose one to show and will hide the rest.

                Each fo:multi-case represents one possible view or state of the content. The fo:multi-switch parent element controls which case is currently visible.

                The content of a multi-case can include any combination of block-level and inline-level formatting objects.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:group minOccurs="0" maxOccurs="unbounded" ref="fo:mixed-level"/>
            <xs:attributeGroup ref="fo:inheritable-properties"/>
            <xs:attribute name="id">
                <xs:annotation>
                    <xs:documentation>
                        Specifies a unique identifier for the multi-case, which can be used for referencing or targeting this element.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="starting-state">
                <xs:annotation>
                    <xs:documentation>
                        Specifies whether this case is the initially visible case when the document is first displayed. When set to "show", this case will be visible by default.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="case-name">
                <xs:annotation>
                    <xs:documentation>
                        Specifies a name for the case, which can be used as a reference by the switch-to attribute of fo:multi-toggle to target this specific case.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="case-title">
                <xs:annotation>
                    <xs:documentation>
                        Specifies a title for the case, which may be displayed in a user interface to help users understand the purpose of this case.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="multi-toggle" substitutionGroup="fo:basic-inlines">
        <xs:annotation>
            <xs:documentation>
                Used within an fo:multi-case to switch to another fo:multi-case. This element creates an interactive control that allows users to change which case is currently visible in a multi-switch.

                The fo:multi-toggle element typically contains text or other inline content that serves as the clickable trigger for switching between cases.

                When a user activates (clicks) the multi-toggle, the parent multi-switch displays the case specified by the switch-to attribute.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:group minOccurs="0" maxOccurs="unbounded" ref="fo:inlines"/>
            <xs:attributeGroup ref="fo:inheritable-properties"/>
            <xs:attribute name="id">
                <xs:annotation>
                    <xs:documentation>
                        Specifies a unique identifier for the multi-toggle, which can be used for referencing or targeting this element.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="switch-to">
                <xs:annotation>
                    <xs:documentation>
                        Specifies which case to display when this toggle is activated. The value should match the case-name attribute of a multi-case within the same multi-switch.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="multi-properties" substitutionGroup="fo:wrappers">
        <xs:annotation>
            <xs:documentation>
                Used to switch between two or more property sets that are associated with a given portion of content. This allows for different formatting properties to be applied to the same content based on different conditions or states.

                The fo:multi-properties element contains one or more fo:multi-property-set elements followed by a single fo:wrapper element. Each fo:multi-property-set specifies an alternative set of properties that can be applied to the content in the wrapper.

                This is commonly used for interactive documents where content appearance changes based on user interaction, such as links that change appearance when hovered over or clicked.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" ref="fo:multi-property-set"/>
                <xs:element ref="fo:wrapper"/>
            </xs:sequence>
            <xs:attributeGroup ref="fo:block-properties"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="multi-property-set">
        <xs:annotation>
            <xs:documentation>
                Used to specify an alternative set of formatting properties that, dependent on a User Agent state, are applied to the content. This element is always used within an fo:multi-properties element.

                Each fo:multi-property-set defines a set of properties that will be applied to the content in the fo:wrapper when the specified active-state matches the current state of the user agent.

                The active-state attribute specifies which user agent state (link, visited, active, hover, or focus) will trigger the application of the properties defined in this element. This allows for dynamic styling of content based on user interaction, similar to CSS pseudo-classes.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attributeGroup ref="fo:block-properties"/>
            <xs:attribute name="active-state" use="required">
                <xs:annotation>
                    <xs:documentation>
                        Specifies the user agent state that will trigger the application of the properties defined in this element. Possible values are:
                        - link: The normal, unvisited state of a link
                        - visited: A link that has been visited by the user
                        - active: A link that is being activated by the user (e.g., clicked)
                        - hover: A link that is being hovered over by the user's pointer
                        - focus: A link that has keyboard focus
                    </xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:token">
                        <xs:enumeration value="link"/>
                        <xs:enumeration value="visited"/>
                        <xs:enumeration value="active"/>
                        <xs:enumeration value="hover"/>
                        <xs:enumeration value="focus"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:complexType name="any" mixed="true">
        <xs:sequence>
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="strict"/>
        </xs:sequence>
    </xs:complexType>
</xs:schema>
